{"version":3,"file":"write.js","sourceRoot":"","sources":["../../../../../lib/salve/json-format/write.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This module contains classes for writing salve's internal schema format.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { Element } from \"../conversion\";\nimport { isElement } from \"../conversion/parser\";\nimport { nameToCode, OPTION_NO_PATHS } from \"./common\";\n\nconst NAME_TO_METHOD_NAME: Record<string, string> = {\n  __proto__: null,\n  group: \"_group\",\n  interleave: \"_interleave\",\n  choice: \"_choice\",\n  oneOrMore: \"_oneOrMore\",\n  element: \"_element\",\n  attribute: \"_attribute\",\n  ref: \"_ref\",\n  define: \"_define\",\n  value: \"_value\",\n  data: \"_data\",\n  list: \"_list\",\n  notAllowed: \"_notAllowed\",\n  empty: \"_empty\",\n  text: \"_text\",\n  name: \"_name\",\n  nameChoice: \"_nameChoice\",\n  nsName: \"_nsName\",\n  anyName: \"_anyName\",\n} as any; // Unfortunately __proto__ requires ``as any``.\n\nclass RNGToJSONConverter {\n  protected readonly arrayStart: string | number;\n  protected _output: string = \"\";\n\n  /**\n   * @param version The version of the format to produce.\n   *\n   * @param nameMap A map for renaming named elements.\n   *\n   * @param includePaths Whether to include paths in the output.\n   *\n   * @param verbose Whether to output verbosely.\n   *\n   * @throws {Error} If the version requested in ``version`` is not supported.\n   */\n  constructor(version: number,\n              readonly nameMap: Map<string, number> | undefined,\n              readonly includePaths: boolean,\n              readonly verbose: boolean) {\n    if (version !== 3) {\n      throw new Error(\"DefaultConversionWalker only supports version 3\");\n    }\n    this.arrayStart = this.verbose ? \"\\\"Array\\\"\" : 0;\n  }\n\n  /** The output of the conversion. */\n  get output(): string {\n    return this._output;\n  }\n\n  private _firstItem: boolean = true;\n\n  /**\n   * Resets the walker to a blank state. This allows using the same walker for\n   * multiple walks.\n   */\n  reset(): void {\n    this._output = \"\";\n    this._firstItem = true;\n  }\n\n  /**\n   * Opens a construct in the output.\n   *\n   * @param open The opening string.\n   *\n   * @param close The closing string. This will be used to check that the\n   * construct is closed properly.\n   */\n  private openConstruct(open: string): void {\n    this.newItem();\n    this._firstItem = true;\n    this._output += open;\n  }\n\n  /**\n   * Indicates that a new item is about to start in the current construct.\n   * Outputs a separator (\",\") if this is not the first item in the construct.\n   */\n  private newItem(): void {\n    if (this._firstItem) {\n      this._firstItem = false;\n\n      return;\n    }\n    this._output += \",\";\n  }\n\n  /**\n   * Outputs an item in the current construct. Outputs a separator (\",\") if this\n   * is not the first item in the construct.\n   *\n   * @param item The item to output.\n   */\n  private outputItem(item: string | number): void {\n    this.newItem();\n    this._output += (typeof item === \"number\") ? item.toString() : item;\n  }\n\n  /**\n   * Outputs a string in the current construct. Outputs a separator (\",\") if\n   * this is not the first item in the construct. The double-quotes in the\n   * string will be escaped and the string will be surrounded by double quotes\n   * in the output.\n   *\n   * @param thing The string to output.\n   */\n  private outputAsString(thing: string): void {\n    this.newItem();\n    const text = thing.replace(/([\"\\\\])/g, \"\\\\$1\");\n    this._output += `\"${text}\"`;\n  }\n\n  /**\n   * Open an array in the output.\n   */\n  private openArray(): void {\n    this.openConstruct(\"[\");\n    this.outputItem(this.arrayStart);\n  }\n\n  convert(el: Element): void {\n    if (el.local !== \"grammar\") {\n      throw new Error(\"top level element must be grammar\");\n    }\n\n    this.openConstruct(\"{\");\n    this.outputItem(`\"v\":3,\"o\":${this.includePaths ? 0 :\nOPTION_NO_PATHS},\"d\":`);\n    const code = nameToCode.grammar;\n    if (code === undefined) {\n      throw new Error(\"can't find constructor for grammar\");\n    }\n    this._firstItem = true;\n    this.openConstruct(\"[\");\n    if (this.verbose) {\n      this.outputAsString(\"Grammar\");\n    }\n    else {\n      this.outputItem(code);\n    }\n    if (this.includePaths) {\n      this.outputAsString(el.path);\n    }\n    // el.children[0] is a start element: walk start's children.\n    this.walkChildren(el.children[0] as Element);\n    this.openArray();\n    // Walk the definitions...\n    this.walkChildren(el, 1);\n    this._output += \"]]}\";\n  }\n\n  // tslint:disable-next-line: max-func-body-length\n  private walk(el: Element): void {\n    const { local } = el;\n\n    const code = nameToCode[local];\n    if (code === undefined) {\n      throw new Error(`can't find constructor for ${local}`);\n    }\n\n    this.openConstruct(\"[\");\n    if (this.verbose) {\n      this.outputAsString(local[0].toUpperCase() + local.slice(1));\n    }\n    else {\n      this.outputItem(code);\n    }\n    if (this.includePaths) {\n      this.outputAsString(el.path);\n    }\n\n    const handler = (this as any)[NAME_TO_METHOD_NAME[local]];\n    if (handler === undefined) {\n        throw new Error(`did not expect an element with name ${local} here`);\n    }\n\n    handler.call(this, el);\n    this._output += \"]\";\n  }\n\n  // @ts-ignore\n  private _group(el: Element): void {\n    this.openArray();\n    this.walkChildren(el);\n    this._output += \"]\";\n  }\n\n  // @ts-ignore\n  private _interleave(el: Element): void {\n    this.openArray();\n    this.walkChildren(el);\n    this._output += \"]\";\n  }\n\n  // @ts-ignore\n  private _choice(el: Element): void {\n    this.openArray();\n    this.walkChildren(el);\n    this._output += \"]\";\n  }\n\n  // @ts-ignore\n  private _oneOrMore(el: Element): void {\n    this.openArray();\n    this.walkChildren(el);\n    this._output += \"]\";\n  }\n\n  // @ts-ignore\n  private _element(el: Element): void {\n    // The first element of `<element>` is necessarily a name class. Note that\n    // there is no need to worry about recursion since it is not possible to get\n    // here recursively from the `this.walk` call that follows. (A name class\n    // cannot contain `<element>`.)\n    this.walkNameClass(el.children[0] as Element);\n    this.openArray();\n    this.walkChildren(el, 1);\n    this._output += \"]\";\n  }\n\n  // @ts-ignore\n  private _attribute(el: Element): void {\n    // The first element of `<attribute>` is necessarily a name class. Note that\n    // there is no need to worry about recursion since it is not possible to get\n    // here recursively from the `this.walk` call that follows. (A name class\n    // cannot contain `<attribute>`.)\n    this.walkNameClass(el.children[0] as Element);\n    this.openArray();\n    this.walkChildren(el, 1);\n    this._output += \"]\";\n  }\n\n  // @ts-ignore\n  private _ref(el: Element): void {\n    const name = el.mustGetAttribute(\"name\");\n    if (this.nameMap !== undefined) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.outputItem(this.nameMap.get(name)!);\n    }\n    else {\n      this.outputAsString(name);\n    }\n  }\n\n  // @ts-ignore\n  private _define(el: Element): void {\n    const name = el.mustGetAttribute(\"name\");\n    if (this.nameMap !== undefined) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.outputItem(this.nameMap.get(name)!);\n    }\n    else {\n      this.outputAsString(name);\n    }\n    this.openArray();\n    this.walkChildren(el);\n    this._output += \"]\";\n  }\n\n  // @ts-ignore\n  private _value(el: Element): void {\n    // Output a variable number of items.\n    // Suppose item 0 is called it0 and so forth. Then:\n    //\n    // Number of items  value  type    datatypeLibrary  ns\n    // 1                it0    \"token\" \"\"               \"\"\n    // 2                it0     it1    \"\"               \"\"\n    // 3                it0     it1    it2              \"\"\n    // 4                it0     it1    it2              it3\n    //\n    this.outputAsString(el.text);\n    const typeAttr = el.mustGetAttribute(\"type\");\n    const datatypeLibraryAttr = el.mustGetAttribute(\"datatypeLibrary\");\n    const nsAttr = el.mustGetAttribute(\"ns\");\n    if (typeAttr !== \"token\" || datatypeLibraryAttr !== \"\" || nsAttr !== \"\") {\n      this.outputAsString(typeAttr);\n      if (datatypeLibraryAttr !== \"\" || nsAttr !== \"\") {\n        this.outputAsString(datatypeLibraryAttr);\n        // No value === empty string.\n        if (nsAttr !== \"\") {\n          this.outputAsString(nsAttr);\n        }\n      }\n    }\n  }\n\n  // @ts-ignore\n  private _data(el: Element): void {\n    // Output a variable number of items.\n    // Suppose item 0 is called it0 and so forth. Then:\n    //\n    // Number of items  type    datatypeLibrary params except\n    // 0                \"token\" \"\"              {}     undefined\n    // 1                it0     \"\"              {}     undefined\n    // 2                it0     it1             {}     undefined\n    // 3                it0     it1             it2    undefined\n    // 4                it0     it1             it2    it3\n    //\n    // Parameters are necessarily first among the children.\n    const { children } = el;\n    const { length } = children;\n    const hasParams = (length !== 0 &&\n                       ((children[0] as Element).local === \"param\"));\n    // Except is necessarily last.\n    const hasExcept =\n      (length !== 0 && (children[length - 1] as Element).local === \"except\");\n\n    const typeAttr = el.mustGetAttribute(\"type\");\n    const datatypeLibraryAttr = el.mustGetAttribute(\"datatypeLibrary\");\n    if (typeAttr !== \"token\" || datatypeLibraryAttr !== \"\" || hasParams ||\n        hasExcept) {\n      this.outputAsString(typeAttr);\n      if (datatypeLibraryAttr !== \"\" || hasParams || hasExcept) {\n        this.outputAsString(datatypeLibraryAttr);\n        if (hasParams || hasExcept) {\n          this.openArray();\n          if (hasParams) {\n            const limit = hasExcept ? length - 1 : children.length;\n            for (let paramIx = 0; paramIx < limit; ++paramIx) {\n              const param = children[paramIx] as Element;\n              this.outputAsString(param.mustGetAttribute(\"name\"));\n              this.outputAsString(param.children[0].text);\n            }\n          }\n          this._output += \"]\";\n          if (hasExcept) {\n            this.walkChildren(children[length - 1] as Element);\n          }\n        }\n      }\n    }\n  }\n\n  // @ts-ignore\n  private _list(el: Element): void {\n    this.walkChildren(el);\n  }\n\n  // @ts-ignore\n  // tslint:disable-next-line:no-empty\n  private _notAllowed(el: Element): void {}\n\n  // @ts-ignore\n  // tslint:disable-next-line:no-empty\n  private _empty(el: Element): void {}\n\n  // @ts-ignore\n  // tslint:disable-next-line:no-empty\n  private _text(el: Element): void {}\n\n  // tslint:disable-next-line: max-func-body-length\n  private walkNameClass(el: Element): void {\n    let { local } = el;\n    if (local === \"choice\") {\n      local = \"nameChoice\";\n    }\n\n    const code = nameToCode[local];\n    if (code === undefined) {\n      throw new Error(`can't find constructor for ${local}`);\n    }\n\n    this.openConstruct(\"[\");\n    if (this.verbose) {\n      this.outputAsString(local[0].toUpperCase() + local.slice(1));\n    }\n    else {\n      this.outputItem(code);\n    }\n    if (this.includePaths) {\n      this.outputAsString(el.path);\n    }\n\n    const handler = (this as any)[NAME_TO_METHOD_NAME[local]];\n    if (handler === undefined) {\n      throw new Error(`did not expect an element with name ${local} here`);\n    }\n\n    handler.call(this, el);\n\n    this._output += \"]\";\n  }\n\n  // @ts-ignore\n  private _name(el: Element): void {\n    this.outputAsString(el.mustGetAttribute(\"ns\"));\n    this.outputAsString(el.text);\n\n    //add documentation\n    const documentation = el.documentation?.replace(/\\n/g, \"\\\\n\") ?? \"\";\n    this.outputAsString(documentation);;\n  }\n\n  // @ts-ignore\n  private _nameChoice(el: Element): void {\n    this.openArray();\n    for (const child of el.children as Element[]) {\n      this.walkNameClass(child);\n    }\n    this._output += \"]\";\n  }\n\n  // @ts-ignore\n  private _nsName(el: Element): void {\n    this.outputAsString(el.mustGetAttribute(\"ns\"));\n    this._anyName(el);\n  }\n\n  private _anyName(el: Element): void {\n    // There can only be at most one child, and it has to be \"except\".\n    if (el.children.length > 0) {\n      const except = el.children[0] as Element;\n      // We do not output anything for this element itself but instead go\n      // straight to its children.\n      for (const child of except.children as Element[]) {\n        this.walkNameClass(child);\n      }\n    }\n  }\n\n  /**\n   * Walks an element's children.\n   *\n   * @param el The element whose children must be walked.\n   *\n   * @param startAt Index at which to start walking.\n   */\n  private walkChildren(el: Element, startAt: number = 0): void {\n    const children = el.children;\n    const limit = children.length;\n\n    if (limit < startAt) {\n      throw new Error(\"invalid parameters passed\");\n    }\n\n    for (let i = startAt; i < limit; ++i) {\n      const child = children[i];\n      if (isElement(child)) {\n        this.walk(child);\n      }\n    }\n  }\n}\n\nfunction gatherNamed(el: Element, all: Map<string, number>): void {\n  for (const child of el.children) {\n    if (!isElement(child)) {\n      continue;\n    }\n\n    if (child.local === \"define\" || child.local === \"ref\") {\n      const name = child.mustGetAttribute(\"name\");\n      let count = all.get(name);\n      if (count === undefined) {\n        count = 0;\n      }\n      all.set(name, ++count);\n    }\n\n    gatherNamed(child, all);\n  }\n}\n\nexport function writeTreeToJSON(tree: Element, formatVersion: number,\n                                includePaths: boolean = false,\n                                verbose: boolean = false,\n                                rename: boolean = true): string {\n  let nameMap: Map<string, number> | undefined;\n  if (rename) {\n    const names = new Map<string, number>();\n    gatherNamed(tree, names);\n    // Now assign new names with shorter new names being assigned to those\n    // original names that are most frequent.\n    const sorted = Array.from(names.entries());\n    // Yes, we want to sort in reverse order of frequency, highest first.\n    sorted.sort(([_keyA, freqA], [_keyB, freqB]) => freqB - freqA);\n\n    let id = 1;\n    nameMap = new Map();\n    for (const [key] of sorted) {\n      nameMap.set(key, id++);\n    }\n  }\n\n  const walker = new RNGToJSONConverter(formatVersion, nameMap, includePaths,\n                                        verbose);\n\n  walker.convert(tree);\n\n  return walker.output;\n}\n"]}