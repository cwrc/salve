{"version":3,"file":"value.js","sourceRoot":"","sources":["../../../../../lib/salve/patterns/value.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Pattern and walker for RNG's ``list`` elements.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { Datatype, registry } from \"../datatypes\";\nimport { EName } from \"../ename\";\nimport { ValidationError } from \"../errors\";\nimport { TextEvent } from \"../events\";\nimport { NameResolver } from \"../name_resolver\";\nimport { EndResult, EventSet, InternalFireEventResult, InternalWalker,\n         Pattern } from \"./base\";\n\n/**\n * Value pattern.\n */\nexport class Value extends Pattern {\n  readonly datatype: Datatype;\n  readonly rawValue: string;\n  readonly documentation: string | undefined;\n  private _value: any | undefined;\n\n  /**\n   * @param xmlPath This is a string which uniquely identifies the\n   * element from the simplified RNG tree. Used in debugging.\n   *\n   * @param value The value expected in the document.\n   *\n   * @param type The type of value. ``undefined`` means\n   * ``\"token\"``.\n   *\n   * @param datatypeLibrary The URI of the datatype library to\n   * use. ``undefined`` means use the builtin library.\n   *\n   * @param ns The namespace in which to interpret the value.\n   * \n   * @param documentation Documentation about the value.\n   */\n  // tslint:disable-next-line: no-reserved-keywords\n  constructor(xmlPath: string, value: string, readonly type: string = \"token\",\n              readonly datatypeLibrary: string = \"\", readonly ns: string = \"\",\n              documentation?: string) {\n    super(xmlPath);\n    this.datatype = registry.get(this.datatypeLibrary).types[this.type];\n    if (this.datatype === undefined) {\n      throw new Error(`unknown type: ${type}`);\n    }\n    this.rawValue = value;\n    this.documentation = documentation;\n  }\n\n  get value(): any {\n    let ret = this._value;\n    if (ret != null) {\n      return ret;\n    }\n\n    // We construct a pseudo-context representing the context in the schema\n    // file.\n    let context: { resolver: NameResolver } | undefined;\n    if (this.datatype.needsContext) {\n      context = {\n        resolver: {\n          resolveName: (name: string): EName => {\n            return new EName(this.ns, name);\n          },\n\n          clone(): NameResolver {\n            throw new Error(\"cannot clone this resolver\");\n          },\n        },\n      };\n    }\n    ret = this._value = this.datatype.parseValue(this.xmlPath,\n                                                 this.rawValue, context);\n\n    return ret;\n  }\n\n  hasEmptyPattern(): boolean {\n    return this.rawValue === \"\";\n  }\n\n  newWalker(): InternalWalker {\n    const hasEmptyPattern = this.hasEmptyPattern();\n\n    // tslint:disable-next-line:no-use-before-declare\n    return new ValueWalker(this,\n                           false,\n                           hasEmptyPattern,\n                           hasEmptyPattern);\n  }\n}\n\n/**\n * Walker for [[Value]].\n */\nclass ValueWalker implements InternalWalker {\n  constructor(protected readonly el: Value,\n              private matched: boolean,\n              public canEndAttribute: boolean,\n              public canEnd: boolean) {}\n\n  clone(): this {\n    return new ValueWalker(this.el,\n                           this.matched,\n                           this.canEndAttribute,\n                           this.canEnd) as this;\n  }\n\n  possible(): EventSet {\n    return new Set(this.matched ? undefined :\n                   [new TextEvent(this.el.rawValue, this.el.documentation)]);\n  }\n\n  possibleAttributes(): EventSet {\n    return new Set();\n  }\n\n  fireEvent(name: string, params: string[],\n            nameResolver: NameResolver): InternalFireEventResult {\n    if (this.matched || name !== \"text\" ||\n        !this.el.datatype.equal(params[0], this.el.value,\n                                { resolver: nameResolver })) {\n      return new InternalFireEventResult(false);\n    }\n\n    this.matched = true;\n    this.canEndAttribute = this.canEnd = true;\n\n    return new InternalFireEventResult(true);\n  }\n\n  end(): EndResult {\n    return this.canEnd ? false :\n      [new ValidationError(`value required: ${this.el.rawValue}`)];\n  }\n\n  endAttributes(): EndResult {\n    return this.canEndAttribute ? false :\n      [new ValidationError(`value required: ${this.el.rawValue}`)];\n  }\n}\n\n//  LocalWords:  RNG's MPL RNG nd possibleCached\n"]}