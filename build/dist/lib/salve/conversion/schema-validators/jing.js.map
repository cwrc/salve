{"version":3,"file":"jing.js","sourceRoot":"","sources":["../../../../../../lib/salve/conversion/schema-validators/jing.ts"],"names":[],"mappings":";;;;AAAA;;;;;;GAMG;AACH,iDAAsC;AAEtC,4DAC+E;AAE/E,MAAa,aAAa;IACxB,YAAqB,OAA+B;QAA/B,YAAO,GAAP,OAAO,CAAwB;IAAG,CAAC;IAElD,QAAQ,CAAC,SAAc;;YAC3B,IAAI,UAAU,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;YACtC,IAAI,SAAS,CAAC,QAAQ,KAAK,OAAO,EAAE;gBAClC,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;aACnD;iBACI;gBACH,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACrD;YAED,IAAI,GAAG,GAAG,MAAM,IAAI,OAAO,CAAS,OAAO,CAAC,EAAE;gBAC5C,qEAAqE;gBACrE,sEAAsE;gBACtE,oEAAoE;gBACpE,+DAA+D;gBAC/D,oEAAoE;gBACpE,wEAAwE;gBACxE,qEAAqE;gBACrE,mCAAmC;gBACnC,MAAM,KAAK,GAAG,qBAAK,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC,EACjC,EAAE,KAAK,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAE7D,IAAI,MAAM,GAAG,EAAE,CAAC;gBAChB,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;oBAC7B,MAAM,IAAI,IAAI,CAAC;gBACjB,CAAC,CAAC,CAAC;gBAEH,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;oBACrB,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,yEAAyE;YACzE,QAAQ;YACR,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;YAChD,iEAAiE;YACjE,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,mCAAmC,EAAE,EAAE,CAAC,CAAC;YAC3D,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBACxB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAC3B;YAED,qCAAqC;YACrC,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpB,IAAI,GAAG,GAAG,iBAAiB,CAAC;gBAC5B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;oBACzB,GAAG,IAAI,kDAAkD,CAAC;iBAC3D;gBAED,MAAM,IAAI,yCAAqB,CAAC,GAAG,CAAC,CAAC;aACtC;YAED,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;CACF;AAvDD,sCAuDC;AAED,qCAAiB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC","sourcesContent":["/**\n * A schema validator that spawns jing to validate the schema.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { spawn } from \"child_process\";\n\nimport { registerValidator, SchemaValidationError, SchemaValidationResult,\n         SchemaValidator, SchemaValidatorOptions } from \"../schema-validation\";\n\nexport class JingValidator implements SchemaValidator {\n  constructor(readonly options: SchemaValidatorOptions) {}\n\n  async validate(schemaURL: URL): Promise<SchemaValidationResult> {\n    let schemaPath = schemaURL.toString();\n    if (schemaURL.protocol === \"file:\") {\n      schemaPath = schemaPath.replace(/^file:\\/\\//, \"\");\n    }\n    else {\n      throw new Error(\"URLs must use the file: protocol\");\n    }\n\n    let err = await new Promise<string>(resolve => {\n      // This is a bit of a hack. We want to make sure that the schema is a\n      // valid RNG schema as per RNG specs. Running validation on our schema\n      // with a schema that defines a valid schema structure does not trap\n      // import errors or errors that are not expressible in a schema\n      // language. So we run jing with our schema as the schema to use for\n      // validation and /dev/null as the document to validate. This does catch\n      // errors but there is no clean way to get jing to output only schema\n      // errors, hence what we have here.\n      const child = spawn(\"jing\", [schemaPath, \"/dev/null\"],\n                          { stdio: [\"ignore\", \"pipe\", \"ignore\"] });\n\n      let buffer = \"\";\n      child.stdout.on(\"data\", data => {\n        buffer += data;\n      });\n\n      child.on(\"close\", () => {\n        resolve(buffer);\n      });\n    });\n\n    // Remove everything that has to do with /dev/null to avoid confusing the\n    // user.\n    err = err.replace(/\\/dev\\/null(.|[\\r\\n])*/, \"\");\n    // Earlier versions would output this error instead of the above.\n    err = err.replace(/fatal: Premature end of file\\.\\s*/, \"\");\n    if (this.options.verbose) {\n      process.stderr.write(err);\n    }\n\n    // Search for an actual schema error.\n    if (err.length !== 0) {\n      let msg = \"error in schema\";\n      if (!this.options.verbose) {\n        msg += \"; run with --verbose to see what the problem was\";\n      }\n\n      throw new SchemaValidationError(msg);\n    }\n\n    return {};\n  }\n}\n\nregisterValidator(\"jing\", JingValidator);\n"]}