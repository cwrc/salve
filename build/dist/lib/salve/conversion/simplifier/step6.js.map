{"version":3,"file":"step6.js","sourceRoot":"","sources":["../../../../../../lib/salve/conversion/simplifier/step6.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Simplification step 6.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright 2013, 2014 Mangalam Research Center for Buddhist Languages\n */\nimport { Element, isElement, Text } from \"../parser\";\nimport { SchemaValidationError } from \"../schema-validation\";\n\nfunction walk(el: Element, parentNs: string | null): void {\n  const local = el.local;\n\n  let currentNs = el.getAttribute(\"ns\");\n  switch (local) {\n    case \"element\":\n    case \"attribute\":\n      const name = el.getAttribute(\"name\");\n      if (name !== undefined) {\n        el.removeAttribute(\"name\");\n        const nameEl = Element.makeElement(\n          \"name\", [new Text(name)], el.documentation);\n\n        if (currentNs === undefined) {\n          if (local === \"attribute\") {\n            nameEl.setAttribute(\"ns\", \"\");\n            // We have to set currentNs here. The attribute is effectively in\n            // \"no namespace\", and this fact has to carry over to child elements\n            // that may care.\n            currentNs = \"\";\n          }\n          else if (parentNs !== null) {\n            nameEl.setAttribute(\"ns\", parentNs);\n            currentNs = parentNs;\n          }\n        }\n\n        el.prependChild(nameEl);\n      }\n\n      if (currentNs !== undefined) {\n        el.removeAttribute(\"ns\");\n      }\n      break;\n    case \"name\":\n      const { text } = el.children[0];\n      const colon = text.indexOf(\":\");\n      if (colon !== -1) {\n        const prefix = text.substr(0, colon);\n        const localName = text.substr(colon + 1);\n        if (localName.includes(\":\")) {\n          throw new Error(`${text} is not a valid QName`);\n        }\n\n        const ns = el.resolve(prefix);\n        if (ns === undefined) {\n          throw new SchemaValidationError(`cannot resolve name ${text}`);\n        }\n        el.setAttribute(\"ns\", ns);\n        currentNs = ns;\n        el.replaceChildAt(0, new Text(localName));\n      }\n      // Yes, we fall through.\n    case \"nsName\":\n    case \"value\":\n      if (currentNs === undefined) {\n        currentNs = parentNs === null ? \"\" : parentNs;\n        el.setAttribute(\"ns\", currentNs);\n      }\n      break;\n    default:\n      if (currentNs !== undefined) {\n        el.removeAttribute(\"ns\");\n      }\n  }\n\n  const nextNs = currentNs !== undefined ? currentNs : parentNs;\n  for (const child of el.children) {\n    if (isElement(child)) {\n      walk(child, nextNs);\n    }\n  }\n}\n\n/**\n * Implements steps 6, 7 and 8 of the XSL pipeline. Namely:\n *\n * - ``@name`` on ``element`` or ``attribute`` elements is converted to a\n *   ``name`` element.\n *\n * - If a ``name`` element is created for an ``attribute`` element which does\n *   not have an ``@ns``, the ``name`` element has ``@ns=\"\"``.\n *\n * - Any ``name``, ``nsName`` and ``value`` element that does not have an\n *   ``@ns`` gets an ``@ns`` from the closest ancestor with such a value, or the\n *   empty string if there is no such ancestor.\n *\n * - ``@ns`` is removed from all elements except those in the previous point.\n *\n * - When a ``name`` element contains a QName with a prefix, the prefix is\n *   removed from the QName, and a ``@ns`` is added to the ``name`` by resolving\n *   the prefix against the namespaces in effect in the XML file. (We're talking\n *   here about resolving the prefix against the prefixes declared by\n *   ``xmlns:...``. Note that the default namespace set through ``xmlns``\n *   *never* participates in the resolution performed here.)\n *\n * @param el The tree to process. It is modified in-place.\n *\n * @returns The new root of the tree.\n */\nexport function step6(el: Element): Element {\n  walk(el, null);\n\n  return el;\n}\n"]}