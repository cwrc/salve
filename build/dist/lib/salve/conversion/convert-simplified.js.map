{"version":3,"file":"convert-simplified.js","sourceRoot":"","sources":["../../../../../lib/salve/conversion/convert-simplified.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This module contains the logic for converting a simplified schema to a\n * pattern.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { AnyName, ConcreteName, Name, NameChoice,\n         NsName } from \"../name_patterns\";\nimport { Attribute, Choice, Data, Define, Element as ElementPattern, Empty,\n         Grammar, Group, Interleave, List, NotAllowed, OneOrMore, Pattern, Ref,\n         Text as TextPattern, Value } from \"../patterns\";\nimport { Element } from \"./parser\";\n\nfunction walk(el: Element): (Pattern | ElementPattern | Grammar) {\n  switch (el.local) {\n      //  \"param\" is not needed as a separate case, because it is handled in\n      //  \"data\"\n      //\n    case \"grammar\":\n      return new Grammar(el.path, walk(el.children[0] as Element) as Pattern,\n                         el.children.slice(1)\n                         .map(x => walk(x as Element)) as Define[]);\n    case \"except\":\n    case \"start\":\n      return walk(el.children[0] as Element);\n    case \"define\":\n      return new Define(el.path, el.mustGetAttribute(\"name\"),\n                        walk(el.children[0] as Element) as ElementPattern);\n    case \"ref\":\n      return new Ref(el.path, el.mustGetAttribute(\"name\"));\n    case \"value\":\n      return new Value(el.path, el.text, el.mustGetAttribute(\"type\"),\n                       el.mustGetAttribute(\"datatypeLibrary\"),\n                       el.mustGetAttribute(\"ns\"),\n                       el.documentation);\n    case \"data\":\n      const children = el.children;\n      const length = children.length;\n      const last = children[length - 1] as Element;\n      const except =\n        (length !== 0 && last.local === \"except\") ? last : undefined;\n      const params =\n        ((except === undefined ? children : children.slice(0, -1)) as Element[])\n        .map(param => ({ name: param.mustGetAttribute(\"name\"),\n                         value: param.children[0].text }));\n\n      return new Data(el.path, el.mustGetAttribute(\"type\"),\n                      el.mustGetAttribute(\"datatypeLibrary\"),\n                      params, except !== undefined ?\n                      walk(except) as Pattern :\n                      undefined);\n    case \"group\":\n      return new Group(el.path,\n                       walk(el.children[0] as Element) as Pattern,\n                       walk(el.children[1] as Element) as Pattern);\n    case \"interleave\":\n      return new Interleave(el.path,\n                            walk(el.children[0] as Element) as Pattern,\n                            walk(el.children[1] as Element) as Pattern);\n    case \"choice\":\n      return new Choice(el.path,\n                        walk(el.children[0] as Element) as Pattern,\n                        walk(el.children[1] as Element) as Pattern);\n    case \"oneOrMore\":\n      return new OneOrMore(el.path,\n                           walk(el.children[0] as Element) as Pattern);\n    case \"element\":\n      return new ElementPattern(el.path,\n                                walkNameClass(el.children[0] as Element),\n                                walk(el.children[1] as Element) as Pattern);\n    case \"attribute\":\n      return new Attribute(el.path,\n                           walkNameClass(el.children[0] as Element),\n                           walk(el.children[1] as Element) as Pattern);\n    case \"empty\":\n      return new Empty(el.path);\n    case \"text\":\n      return new TextPattern(el.path);\n    case \"list\":\n      return new List(el.path, walk(el.children[0] as Element) as Pattern);\n    case \"notAllowed\":\n      return new NotAllowed(el.path);\n    default:\n      throw new Error(`unexpected local name: ${el.local}`);\n  }\n}\n\nfunction walkNameClass(el: Element): ConcreteName {\n  switch (el.local) {\n    case \"choice\":\n      return new NameChoice(walkNameClass(el.children[0] as Element),\n                            walkNameClass(el.children[1] as Element));\n    case \"name\":\n      return new Name(el.mustGetAttribute(\"ns\"), el.text, el.documentation);\n    case \"nsName\":\n      return new NsName(el.mustGetAttribute(\"ns\"),\n                        el.children.length !== 0 ?\n                        walkNameClass(el.children[0] as Element) :\n                        undefined);\n    case \"anyName\":\n      return new AnyName(el.children.length !== 0 ?\n                         walkNameClass(el.children[0] as Element) :\n                         undefined);\n    case \"except\":\n      return walkNameClass(el.children[0] as Element);\n    default:\n      throw new Error(`unexpected local name: ${el.local}`);\n  }\n}\n\nexport function makePatternFromSimplifiedSchema(tree: Element): Grammar {\n  const ret = walk(tree);\n  if (!(ret instanceof Grammar)) {\n    throw new Error(\"tree did not produce a Grammar!\");\n  }\n\n  return ret;\n}\n"]}