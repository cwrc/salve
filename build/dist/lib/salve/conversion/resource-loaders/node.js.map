{"version":3,"file":"node.js","sourceRoot":"","sources":["../../../../../../lib/salve/conversion/resource-loaders/node.ts"],"names":[],"mappings":";;;;AAAA;;;;;;;GAOG;AACH,+CAAyB;AAGzB,mCAA8C;AAE9C,MAAa,YAAY;IACvB,YAAqB,GAAQ,EAAmB,IAAY;QAAvC,QAAG,GAAH,GAAG,CAAK;QAAmB,SAAI,GAAJ,IAAI,CAAQ;IAAG,CAAC;IAE1D,OAAO;;YACX,OAAO,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;KAAA;CACF;AAND,oCAMC;AAED;;;;;;GAMG;AACH,MAAa,kBAAkB;IAA/B;QACE,8EAA8E;QAC9E,sDAAsD;QACrC,gBAAW,GAAwB,IAAI,2BAAmB,EAAE,CAAC;IAsBhF,CAAC;IApBO,IAAI,CAAC,GAAQ;;YACjB,IAAI,GAAG,CAAC,QAAQ,KAAK,OAAO,EAAE;gBAC5B,IAAI,GAAG,CAAC,IAAI,KAAK,EAAE,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;oBAC7C,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC3C;gBACD,OAAO,IAAI,OAAO,CAAW,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBAC/C,EAAE,CAAC,QAAQ,CAAC,GAAwB,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;wBAClD,IAAI,GAAG,IAAI,IAAI,EAAE;4BACf,MAAM,CAAC,GAAG,CAAC,CAAC;4BAEZ,OAAO;yBACR;wBAED,OAAO,CAAC,IAAI,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;oBAClD,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;YAED,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC;KAAA;CACF;AAzBD,gDAyBC","sourcesContent":["/**\n * A resource loader that loads resources using Node's ``fs`` facilities or\n * ``fetch``.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport * as fs from \"fs\";\n\nimport { Resource, ResourceLoader } from \"../resource-loader\";\nimport { FetchResourceLoader } from \"./fetch\";\n\nexport class NodeResource implements Resource {\n  constructor(readonly url: URL, private readonly text: string) {}\n\n  async getText(): Promise<string> {\n    return this.text;\n  }\n}\n\n/**\n * A resource loader that loads resources using Node's ``fs`` facilities or\n * ``fetch``.\n *\n * URLs with the file: protocol are loaded through Node's ``fs``\n * facilities. Otherwise, fetch is used.\n */\nexport class NodeResourceLoader implements ResourceLoader {\n  // We use composition to delegate network loads to the fetch loader. Extending\n  // FetchResourceLoader causes interface complications.\n  private readonly fetchLoader: FetchResourceLoader = new FetchResourceLoader();\n\n  async load(url: URL): Promise<Resource> {\n    if (url.protocol === \"file:\") {\n      if (url.hash !== \"\" || url.href.endsWith(\"#\")) {\n        throw new Error(\"url cannot have a hash\");\n      }\n      return new Promise<Resource>((resolve, reject) => {\n        fs.readFile(url as unknown as string, (err, data) => {\n          if (err != null) {\n            reject(err);\n\n            return;\n          }\n\n          resolve(new NodeResource(url, data.toString()));\n        });\n      });\n    }\n\n    return this.fetchLoader.load(url);\n  }\n}\n"]}