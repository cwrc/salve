{"version":3,"file":"resource-loader.js","sourceRoot":"","sources":["../../../../../lib/salve/conversion/resource-loader.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAuBH,+CAA+C;AAC/C,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;IAChC,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;CACvE;AAQD,SAAgB,kBAAkB;IAChC,+CAA+C;IAC/C,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QACjC,8CAA8C;QAC9C,MAAM,IAAI,GAAG,OAAO,CAAC,yBAAyB,CAAiB,CAAC;QAEhE,OAAO,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;KACtC;IAED,8CAA8C;IAC9C,MAAM,KAAK,GAAG,OAAO,CAAC,0BAA0B,CAAkB,CAAC;IAEnE,OAAO,IAAI,KAAK,CAAC,mBAAmB,EAAE,CAAC;AACzC,CAAC;AAbD,gDAaC","sourcesContent":["/**\n * Facilities for loading resources.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nexport interface Resource {\n  /** The URL for this resource. */\n  url: URL;\n\n  /** Get the resource as a string. */\n  getText(): Promise<string>;\n}\n\nexport interface ResourceLoader<R extends Resource = Resource> {\n  /**\n   * @param path The path from which to load the resource. ``file://`` paths are\n   * understood to be pointing into the filesystem local to the JavaScript\n   * virtual machine executing this code. Note that some resource loaders may be\n   * incapable of loading specific URLs. For instance a browser-based resource\n   * loader will normally refuse loading files from the local file system.\n   *\n   * @returns The resource.\n   */\n  load(path: URL): Promise<R>;\n}\n\n// tslint:disable-next-line:no-typeof-undefined\nif (typeof fetch === \"undefined\") {\n  throw new Error(\"all resource loaders require fetch to be available\");\n}\n\n// These imports actually only import TypeScript type information, and do not\n// result in ``require`` calls being made. We use them for the castings done\n// below.\nimport * as fetch_ from \"./resource-loaders/fetch\";\nimport * as node_ from \"./resource-loaders/node\";\n\nexport function makeResourceLoader(): ResourceLoader {\n  // tslint:disable-next-line:no-typeof-undefined\n  if (typeof window === \"undefined\") {\n    // tslint:disable-next-line:no-require-imports\n    const node = require(\"./resource-loaders/node\") as typeof node_;\n\n    return new node.NodeResourceLoader();\n  }\n\n  // tslint:disable-next-line:no-require-imports\n  const fetch = require(\"./resource-loaders/fetch\") as typeof fetch_;\n\n  return new fetch.FetchResourceLoader();\n}\n"]}