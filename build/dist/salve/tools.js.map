{"version":3,"file":"tools.js","sourceRoot":"","sources":["../../../lib/salve/tools.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;AAEH;;;;;;;;GAQG;AACH,SAAgB,YAAY,CAAC,GAAQ,EACR,MAAmC;IAC9D,MAAM,QAAQ,GAAG,MAAM,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;IAE7C,IAAI,QAAQ,KAAK,MAAM,EAAE;QACvB,IAAI,MAAM,CAAC,cAAc,KAAK,SAAS,EAAE;YACvC,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;SAC9C;aACI;YACH,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;SAClC;KACF;AACH,CAAC;AAbD,oCAaC;AAED,kCAAkC","sourcesContent":["/**\n * Common tools for salve.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\n/**\n * This is required to work around a problem when extending built-in classes\n * like ``Error``. Some of the constructors for these classes return a value\n * from the constructor, which is then picked up by the constructors generated\n * by TypeScript (same with ES6 code transpiled through Babel), and this messes\n * up the inheritance chain.\n *\n * See https://github.com/Microsoft/TypeScript/issues/12123.\n */\nexport function fixPrototype(obj: any,\n                             parent: new (...args: any[]) => any): void {\n  const oldProto = Object.getPrototypeOf !== undefined ?\n    Object.getPrototypeOf(obj) : obj.__proto__;\n\n  if (oldProto !== parent) {\n    if (Object.setPrototypeOf !== undefined) {\n      Object.setPrototypeOf(obj, parent.prototype);\n    }\n    else {\n      obj.__proto__ = parent.prototype;\n    }\n  }\n}\n\n//  LocalWords:  MPL jQuery Lodash\n"]}