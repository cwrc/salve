{"version":3,"file":"xmllint.js","sourceRoot":"","sources":["../../../../../lib/salve/conversion/schema-validators/xmllint.ts"],"names":[],"mappings":";;;;AAAA;;;;;;GAMG;AACH,iDAAsC;AAEtC,4DAC+E;AAE/E,MAAa,gBAAgB;IAC3B,YAAqB,OAA+B;QAA/B,YAAO,GAAP,OAAO,CAAwB;IAAG,CAAC;IAElD,QAAQ,CAAC,SAAc;;YAC3B,IAAI,UAAU,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;YACtC,IAAI,SAAS,CAAC,QAAQ,KAAK,OAAO,EAAE;gBAClC,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;aACnD;iBACI;gBACH,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACrD;YAED,MAAM,GAAG,GAAG,MAAM,IAAI,OAAO,CAAS,OAAO,CAAC,EAAE;gBAC9C,MAAM,KAAK,GAAG,qBAAK,CAAC,SAAS,EAAE,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC,EACjD,EAAE,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;gBAE7D,IAAI,MAAM,GAAG,EAAE,CAAC;gBAChB,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;oBAC7B,MAAM,IAAI,IAAI,CAAC;gBACjB,CAAC,CAAC,CAAC;gBAEH,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;oBACrB,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,qCAAqC;YACrC,IAAI,GAAG,CAAC,MAAM,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC9C,IAAI,GAAG,GAAG,iBAAiB,CAAC;gBAC5B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;oBACzB,GAAG,IAAI,kDAAkD,CAAC;iBAC3D;qBACI;oBACH,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC3B;gBAED,MAAM,IAAI,yCAAqB,CAAC,GAAG,CAAC,CAAC;aACtC;YAED,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;CACF;AAzCD,4CAyCC;AAED,qCAAiB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC","sourcesContent":["/**\n * A schema validator that spawns xmllint to validate the schema.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { spawn } from \"child_process\";\n\nimport { registerValidator, SchemaValidationError, SchemaValidationResult,\n         SchemaValidator, SchemaValidatorOptions } from \"../schema-validation\";\n\nexport class XMLLintValidator implements SchemaValidator {\n  constructor(readonly options: SchemaValidatorOptions) {}\n\n  async validate(schemaURL: URL): Promise<SchemaValidationResult> {\n    let schemaPath = schemaURL.toString();\n    if (schemaURL.protocol === \"file:\") {\n      schemaPath = schemaPath.replace(/^file:\\/\\//, \"\");\n    }\n    else {\n      throw new Error(\"URLs must use the file: protocol\");\n    }\n\n    const err = await new Promise<string>(resolve => {\n      const child = spawn(\"xmllint\", [\"--relaxng\", schemaPath, \"/dev/null\"],\n                          { stdio: [\"ignore\", \"ignore\", \"pipe\"] });\n\n      let buffer = \"\";\n      child.stderr.on(\"data\", data => {\n        buffer += data;\n      });\n\n      child.on(\"close\", () => {\n        resolve(buffer);\n      });\n    });\n\n    // Search for an actual schema error.\n    if (err.search(/Relax-NG parser error/) !== -1) {\n      let msg = \"error in schema\";\n      if (!this.options.verbose) {\n        msg += \"; run with --verbose to see what the problem was\";\n      }\n      else {\n        process.stderr.write(err);\n      }\n\n      throw new SchemaValidationError(msg);\n    }\n\n    return {};\n  }\n}\n\nregisterValidator(\"xmllint\", XMLLintValidator);\n"]}