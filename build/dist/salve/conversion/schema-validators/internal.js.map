{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../../../lib/salve/conversion/schema-validators/internal.ts"],"names":[],"mappings":";;;;AAAA;;;;;;GAMG;AACH,6DAAoE;AACpE,4DACyE;AAEzE,MAAa,iBAAiB;IAC5B,YAAqB,OAA0C;QAA1C,YAAO,GAAP,OAAO,CAAmC;IAAG,CAAC;IAE7D,QAAQ,CAAC,UAAe;;YAC5B,MAAM,UAAU,GAAG,IAAI,6BAAkB,iCACpC,IAAI,CAAC,OAAO,KACf,QAAQ,EAAE,IAAI,IACd,CAAC;YAEH,OAAO,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACzC,CAAC;KAAA;CACF;AAXD,8CAWC;AAED,qCAAiB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC","sourcesContent":["/**\n * A schema validator that uses salve to validate the schema.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { InternalSimplifier } from \"../schema-simplifiers/internal\";\nimport { registerValidator, SchemaValidationResult, SchemaValidator,\n         SimplifyingSchemaValidatorOptions } from \"../schema-validation\";\n\nexport class InternalValidator implements SchemaValidator {\n  constructor(readonly options: SimplifyingSchemaValidatorOptions) {}\n\n  async validate(schemaPath: URL): Promise<SchemaValidationResult> {\n    const simplifier = new InternalSimplifier({\n      ...this.options,\n      validate: true,\n    });\n\n    return simplifier.simplify(schemaPath);\n  }\n}\n\nregisterValidator(\"internal\", InternalValidator);\n"]}