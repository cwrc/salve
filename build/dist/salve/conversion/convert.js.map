{"version":3,"file":"convert.js","sourceRoot":"","sources":["../../../../lib/salve/conversion/convert.ts"],"names":[],"mappings":";;;;AASA,6DAAuE;AAEvE,uDAAuE;AAEvE,4DAAmE;AAoDnE,MAAM,eAAe,GAAiC;IACpD,cAAc,EAAE,KAAK;IACrB,qBAAqB,EAAE,OAAO;IAC9B,cAAc,EAAE,SAAS;CAC1B,CAAC;AAEF;;;;;;;;;;;GAWG;AACH,SAAsB,mBAAmB,CACvC,UAAe,EACf,UAA6C,eAAe;;QAE5D,MAAM,cAAc,GAAG,OAAO,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC;YAC3D,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,oCAAkB,EAAE,CAAC;QAEhD,MAAM,UAAU,GAAG,IAAI,6BAAkB,CAAC;YACxC,OAAO,EAAE,KAAK;YACd,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,QAAQ;YACpB,cAAc;YACd,QAAQ,EAAE,IAAI;YACd,cAAc,EAAE,OAAO,CAAC,cAAc;YACtC,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;SACrD,CAAC,CAAC;QAEH,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,GACtC,MAAM,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAExC,OAAO;YACL,OAAO,EAAE,oDAA+B,CAAC,UAAU,CAAC;YACpD,UAAU;YACV,QAAQ;YACR,QAAQ;SACT,CAAC;IACJ,CAAC;CAAA;AA3BD,kDA2BC","sourcesContent":["/**\n * This module contains the logic for programmatically validating and\n * simplifiying a schema.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { Grammar } from \"../patterns\";\nimport { makePatternFromSimplifiedSchema } from \"./convert-simplified\";\nimport { Element } from \"./parser\";\nimport { makeResourceLoader, ResourceLoader } from \"./resource-loader\";\nimport { HashFunction, ManifestEntry } from \"./schema-simplification\";\nimport { InternalSimplifier } from \"./schema-simplifiers/internal\";\n\nexport interface ConversionResult {\n  /** The schema converted to a Grammar pattern. */\n  pattern: Grammar;\n\n  /** The simplified schema as a tree of XML elements. */\n  simplified: Element;\n\n  /** Any warning encountered during conversion. */\n  warnings: string[];\n\n  /** The file manifest. Only populated if its creation was requested. */\n  manifest: ManifestEntry[];\n}\n\nexport interface ConversionOptions<\n  RL extends (ResourceLoader | undefined) = ResourceLoader> {\n  /**\n   * Whether to create a manifest. This is optional because not all use-case\n   * scenarios require the creation of a manifest, but the price for creating\n   * one is non-negligible.\n   */\n  createManifest: boolean;\n\n  /**\n   * Either a hash function or the name of an algorithm to use for hashing the\n   * source.\n   *\n   * If a string, then the string is the name of the algorithm to use for\n   * creating the hashes in the manifest. The supported names are those of the\n   * [``SubtleCrypto.digest()``][1] function.\n   *\n   * [1]: https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\n   *\n   * Security note: It is up to you to decide what strength hash you need. **The\n   * manifest is not designed for the sake of providing security.** So its\n   * hashes are not designed to detect willful tampering but rather to quickly\n   * determine whether a schema was edited. In the vast majority of real world\n   * usage scenarios, using a stronger hash would not provide better security\n   * because if an attacker can replace a schema with their own file, they also\n   * can access the manifest and replace the hash.\n   */\n  manifestHashAlgorithm: string | HashFunction;\n\n  /**\n   * The resource loader to use to load resources. This is what the conversion\n   * algorithm will use to load the schema and any file the schema includes.\n   */\n  resourceLoader: RL;\n}\n\nconst DEFAULT_OPTIONS: ConversionOptions<undefined> = {\n  createManifest: false,\n  manifestHashAlgorithm: \"SHA-1\",\n  resourceLoader: undefined,\n};\n\n/**\n * Validate, simplify and convert a schema to a pattern, which can then be used\n * to validate an XML document. This function uses the internal simplification\n * and validation code.\n *\n * @param schemaPath The schema's location. The schema must be in the XML Relax\n * NG format. (Not the compact notation.)\n *\n * @param options The options driving the conversion.\n *\n * @returns The converted pattern.\n */\nexport async function convertRNGToPattern<RL extends ResourceLoader>(\n  schemaPath: URL,\n  options: ConversionOptions<RL | undefined> = DEFAULT_OPTIONS):\nPromise<ConversionResult> {\n  const resourceLoader = options.resourceLoader !== undefined ?\n    options.resourceLoader : makeResourceLoader();\n\n  const simplifier = new InternalSimplifier({\n    verbose: false,\n    timing: false,\n    keepTemp: false,\n    simplifyTo: Infinity,\n    resourceLoader,\n    validate: true,\n    createManifest: options.createManifest,\n    manifestHashAlgorithm: options.manifestHashAlgorithm,\n  });\n\n  const { simplified, warnings, manifest } =\n    await simplifier.simplify(schemaPath);\n\n  return {\n    pattern: makePatternFromSimplifiedSchema(simplified),\n    simplified,\n    warnings,\n    manifest,\n  };\n}\n"]}