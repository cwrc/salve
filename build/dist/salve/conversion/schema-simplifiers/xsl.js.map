{"version":3,"file":"xsl.js","sourceRoot":"","sources":["../../../../../lib/salve/conversion/schema-simplifiers/xsl.ts"],"names":[],"mappings":";;;;AAAA;;;;;;;GAOG;AACH,iDAAsC;AACtC,+CAAyB;AACzB,mDAA6B;AAE7B,sCACkD;AAClD,oEACgE;AAChE,iCAAwC;AACxC,qCAA6C;AAU7C;;;;;GAKG;AACH,MAAa,aAAc,SAAQ,qBAAc;IAO/C,YAAY,OAAgC;QAC1C,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;SACxB;IACH,CAAC;IAEO,gBAAgB,CAAC,IAAa;QACpC,MAAM,SAAS,GAAG,IAAI,0BAAiB,EAAE,CAAC;QAC1C,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAErB,OAAO,SAAS,CAAC,QAAQ,CAAC;IAC5B,CAAC;IAED,IAAY,KAAK;QACf,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YAC7B,OAAO,IAAI,CAAC,MAAM,CAAC;SACpB;QAED,2EAA2E;QAC3E,sBAAsB;QACtB,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EACV,oBAAoB,CAAC,CAAC,CAAC;QACzE,MAAM,MAAM,GAAG,qCAAqC,CAAC;QACrD,MAAM,SAAS,GACb,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QAE7D,kDAAkD;QAClD,iDAAiD;QACjD,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC;YACvC,iDAAiD;YACjD,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAE9C,OAAO,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACxC,MAAM,GAAG,GAAS;gBAChB,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC;gBAC9B,QAAQ,EAAE,CAAC;gBACX,KAAK,EAAE,KAAK;aACb,CAAC;YACF,IAAI,IAAI,KAAK,8BAA8B,EAAE;gBAC3C,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC;gBACjB,oEAAoE;gBACpE,cAAc;gBACd,GAAG,CAAC,UAAU,GAAG,8BAAqB,CAAC;aACxC;YAED,OAAO,GAAG,CAAC;QACb,CAAC,CAAC,CAAC;IACL,CAAC;IAEK,QAAQ,CAAC,SAAc;;YAC3B,IAAI,UAAU,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;YACtC,IAAI,SAAS,CAAC,QAAQ,KAAK,OAAO,EAAE;gBAClC,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;aACnD;iBACI;gBACH,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACrD;YAED,IAAI,SAA6B,CAAC;YAClC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBACxB,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;oBACvB,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;iBACxB;aACF;YAED,MAAM,gBAAgB,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC;YAEtE,MAAM,MAAM,GACV,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC,EACnB,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEjE,MAAM,UAAU,GAAG,8BAAqB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAC7D,MAAM,QAAQ,GAAa,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC1D,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAEzC,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACvB,4DAA4D;gBAC5D,OAAO,CAAC,GAAG,CAAC,yBAAyB,IAAI,CAAC,GAAG,EAAE,GAAG,SAAU,EAAE,CAAC,CAAC;aACjE;YAED,OAAO;gBACL,UAAU;gBACV,QAAQ;gBACR,QAAQ,EAAE,EAAE;aACb,CAAC;QACJ,CAAC;KAAA;IAED,UAAU;QACR,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS,EAAE;YACpC,sCAAsC;YACtC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC;SACrD;IACH,CAAC;IAED;;;;;;;OAOG;IACG,WAAW,CAAC,gBAAwB,EAAE,MAAc,EACxC,KAAa;;YAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACzB,IAAI,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;gBAC/D,OAAO,KAAK,CAAC;aACd;YAED,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;YAE3B,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBACxB,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CACT,uBAAuB,MAAM,GAAG,CAAC,gBAAgB,IAAI,CAAC,QAAQ,KAAK,CAAC,CAAC;gBACvE,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;oBACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;iBACjC;aACF;YAED,IAAI,KAAK,CAAC;YAEV,MAAM,MAAM,GAAG,MAAM,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC3D,qEAAqE;gBACrE,IAAI,IAAI,CAAC,KAAK,EAAE;oBACd,KAAK,GAAG,qBAAK,CACX,MAAM,EACN,CAAC,MAAM,EAAE,8BAA8B,EAAE,QAAQ,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM;wBACnE,sBAAsB,gBAAgB,EAAE,CAAC,EAC1C,EAAE,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC;iBAC3C;qBACI;oBACH,KAAK,GAAG,qBAAK,CACX,UAAU,EACV,CAAC,eAAe,EAAE,aAAa,EAAE,gBAAgB,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAClE;wBACE,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC;wBAClC,GAAG,EAAE,gBAAgB;qBACtB,CAAC,CAAC;iBACN;gBAED,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAEvB,IAAI,SAAS,GAAG,EAAE,CAAC;gBACnB,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;oBAC7B,SAAS,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC/B,CAAC,CAAC,CAAC;gBAEH,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;oBACxB,IAAI,MAAM,KAAK,CAAC,EAAE;wBAChB,MAAM,CAAC,IAAI,KAAK,CAAC,iCAAiC,MAAM,EAAE,CAAC,CAAC,CAAC;qBAC9D;oBAED,OAAO,CAAC,SAAS,CAAC,CAAC;gBACrB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;gBACzB,iDAAiD;gBACjD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,aAAc,EAAE,CAAC;gBAC9C,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBAChD,CAAC,IAAI,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC;gBAC/D,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAC5C,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;aACnC;YAED,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;gBACjC,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;oBAC3B,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAEhB,OAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;iBAC3D;aACF;YAED,OAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,MAAM,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;QAChE,CAAC;KAAA;;AA5LH,sCA6LC;AA5LQ,uBAAS,GAAU,KAAK,CAAC;AACzB,6BAAe,GAAU,KAAK,CAAC;AA6LxC,0CAAkB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC","sourcesContent":["/**\n * A simplifier implemented as a series of XSL transformations. It launches\n * external processes to perform the transformation.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { spawn } from \"child_process\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { dependsOnExternalFile, Element,\n         parseSimplifiedSchema } from \"../parser\";\nimport { registerSimplifier, SchemaSimplifierOptions,\n         SimplificationResult } from \"../schema-simplification\";\nimport { BaseSimplifier } from \"./base\";\nimport { DatatypeProcessor } from \"./common\";\n\ninterface Step {\n  name: string;\n  path: string;\n  repeatWhen?: (rng: string) => boolean;\n  repeatNo: number;\n  saxon: boolean;\n}\n\n/**\n * A simplifier implemented as a series of XSL transformations. It launches\n * external processes to perform the transformation.\n *\n * This simiplifier does not produce a manifest, and it does not validate.\n */\nexport class XSLSimplifier extends BaseSimplifier {\n  static validates: false = false;\n  static createsManifest: false = false;\n\n  private lastStepStart: number;\n  private _steps?: Step[];\n\n  constructor(options: SchemaSimplifierOptions) {\n    super(options);\n    if (options.timing) {\n      options.verbose = true;\n    }\n  }\n\n  private processDatatypes(tree: Element): string[] {\n    const processor = new DatatypeProcessor();\n    processor.walk(tree);\n\n    return processor.warnings;\n  }\n\n  private get steps(): Step[] {\n    if (this._steps !== undefined) {\n      return this._steps;\n    }\n\n    // Grab the xsl files that form the simplification process, and store these\n    // paths in ``steps``.\n    const libPath = path.resolve(__dirname, path.join(\"..\", \"..\",\n                                                      \"rng-simplification\"));\n    const stepRe = /^rng-simplification_step(\\d*?).xsl$/;\n    const stepFiles =\n      fs.readdirSync(libPath).filter(file => file.match(stepRe));\n\n    // The filter step above ensures the regexp match.\n    // tslint:disable-next-line:no-non-null-assertion\n    stepFiles.sort((a, b) => parseInt(a.match(stepRe)![1]) -\n                   // tslint:disable-next-line:no-non-null-assertion\n                   parseInt(b.match(stepRe)![1]));\n\n    return this._steps = stepFiles.map(file => {\n      const ret: Step = {\n        name: file,\n        path: path.join(libPath, file),\n        repeatNo: 0,\n        saxon: false,\n      };\n      if (file === \"rng-simplification_step1.xsl\") {\n        ret.saxon = true;\n        // We want to check whether we need to run the step again to include\n        // more files.\n        ret.repeatWhen = dependsOnExternalFile;\n      }\n\n      return ret;\n    });\n  }\n\n  async simplify(schemaURL: URL): Promise<SimplificationResult> {\n    let schemaPath = schemaURL.toString();\n    if (schemaURL.protocol === \"file:\") {\n      schemaPath = schemaPath.replace(/^file:\\/\\//, \"\");\n    }\n    else {\n      throw new Error(\"URLs must use the file: protocol\");\n    }\n\n    let startTime: number | undefined;\n    if (this.options.verbose) {\n      // tslint:disable-next-line:no-console\n      console.log(\"Simplifying...\");\n      if (this.options.timing) {\n        startTime = Date.now();\n      }\n    }\n\n    const originalInputDir = `${path.dirname(path.resolve(schemaPath))}/`;\n\n    const result =\n      await this.executeStep(originalInputDir, 0,\n                             fs.readFileSync(schemaPath).toString());\n\n    const simplified = parseSimplifiedSchema(schemaPath, result);\n    const warnings: string[] = (this.options.simplifyTo >= 18) ?\n      this.processDatatypes(simplified) : [];\n\n    this.stepTiming();\n    if (this.options.timing) {\n      // tslint:disable-next-line:no-non-null-assertion no-console\n      console.log(`Simplification delta: ${Date.now() - startTime!}`);\n    }\n\n    return {\n      simplified,\n      warnings,\n      manifest: [],\n    };\n  }\n\n  stepTiming(): void {\n    if (this.lastStepStart !== undefined) {\n      // tslint:disable-next-line:no-console\n      console.log(`${Date.now() - this.lastStepStart}ms`);\n    }\n  }\n\n  /**\n   * @param originalInputDir The URL to the directory that contained the\n   * original file to simplify.\n   *\n   * @param stepNo The index in ``steps`` of the step we are running.\n   *\n   * @param input The data to process.\n   */\n  async executeStep(originalInputDir: string, stepNo: number,\n                    input: string): Promise<string> {\n    const steps = this.steps;\n    if (stepNo >= steps.length || stepNo >= this.options.simplifyTo) {\n      return input;\n    }\n\n    const step = steps[stepNo];\n\n    if (this.options.verbose) {\n      this.stepTiming();\n      // tslint:disable-next-line:no-console\n      console.log(\n        `Simplification step ${stepNo + 1}, repetition ${step.repeatNo}...`);\n      if (this.options.timing) {\n        this.lastStepStart = Date.now();\n      }\n    }\n\n    let child;\n\n    const output = await new Promise<string>((resolve, reject) => {\n      // Only step 1 requires XSLT 2. Remember that steps are 0-based here.\n      if (step.saxon) {\n        child = spawn(\n          \"java\",\n          [\"-jar\", \"/usr/share/java/Saxon-HE.jar\", `-xsl:${step.path}`, \"-s:-\",\n           `originalDir=file://${originalInputDir}`],\n          { stdio: [\"pipe\", \"pipe\", \"inherit\"] });\n      }\n      else {\n        child = spawn(\n          \"xsltproc\",\n          [\"--stringparam\", \"originalDir\", originalInputDir, step.path, \"-\"],\n          {\n            stdio: [\"pipe\", \"pipe\", \"inherit\"],\n            cwd: originalInputDir,\n          });\n      }\n\n      child.stdin.end(input);\n\n      let outputBuf = \"\";\n      child.stdout.on(\"data\", data => {\n        outputBuf += data.toString();\n      });\n\n      child.on(\"exit\", status => {\n        if (status !== 0) {\n          reject(new Error(`child terminated with status: ${status}`));\n        }\n\n        resolve(outputBuf);\n      });\n    });\n\n    if (this.options.keepTemp) {\n      // tslint:disable-next-line:no-non-null-assertion\n      const tempDir = this.options.ensureTempDir!();\n      const outBase = `out${String((stepNo + 1)) +\n(step.repeatWhen !== undefined ? `.${step.repeatNo + 1}` : \"\")}.rng`;\n      const outPath = path.join(tempDir, outBase);\n      fs.writeFileSync(outPath, output);\n    }\n\n    if (step.repeatWhen !== undefined) {\n      if (step.repeatWhen(output)) {\n        step.repeatNo++;\n\n        return this.executeStep(originalInputDir, stepNo, output);\n      }\n    }\n\n    return this.executeStep(originalInputDir, stepNo + 1, output);\n  }\n}\n\nregisterSimplifier(\"xsl\", XSLSimplifier);\n"]}