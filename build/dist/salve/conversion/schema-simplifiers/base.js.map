{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../../lib/salve/conversion/schema-simplifiers/base.ts"],"names":[],"mappings":";;;AAUA,MAAsB,cAAc;IAClC,YAA+B,OAAgC;QAAhC,YAAO,GAAP,OAAO,CAAyB;QAC7D,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;SACxB;QACD,IAAI,OAAO,CAAC,QAAQ;YAChB,CAAE,IAAI,CAAC,WAAoC,CAAC,SAAS,EAAE;YACzD,MAAM,IAAI,KAAK,CACb,6DAA6D,CAAC,CAAC;SAClE;QAED,IAAI,OAAO,CAAC,cAAc;YACtB,CAAE,IAAI,CAAC,WAAoC,CAAC,eAAe,EAAE;YAC/D,MAAM,IAAI,KAAK,CACb,qEAAqE,CAAC,CAAC;SAC1E;IACH,CAAC;CAGF;AAnBD,wCAmBC","sourcesContent":["/**\n * A base class providing some functionality that most simplifiers need.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { SchemaSimplifier, SchemaSimplifierCtor, SchemaSimplifierOptions,\n         SimplificationResult } from \"../schema-simplification\";\n\nexport abstract class BaseSimplifier implements SchemaSimplifier {\n  constructor(protected readonly options: SchemaSimplifierOptions) {\n    if (options.timing) {\n      options.verbose = true;\n    }\n    if (options.validate &&\n        !(this.constructor as SchemaSimplifierCtor).validates) {\n      throw new Error(\n        \"requested validation on a simplifier that does not validate\");\n    }\n\n    if (options.createManifest &&\n        !(this.constructor as SchemaSimplifierCtor).createsManifest) {\n      throw new Error(\n        \"requested a manifest on a simplifier that does not create manifests\");\n    }\n  }\n\n  abstract simplify(schemaPath: string | URL): Promise<SimplificationResult>;\n}\n"]}