{"version":3,"file":"step4.js","sourceRoot":"","sources":["../../../../../lib/salve/conversion/simplifier/step4.ts"],"names":[],"mappings":";;;AAAA;;;;;GAKG;AACH,sCAA+C;AAC/C,4DAA6D;AAE7D,SAAS,IAAI,CAAC,EAAW,EAAE,aAAqB;IAC9C,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;IAEvB,MAAM,cAAc,GAAG,EAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;IAC1D,IAAI,cAAc,KAAK,SAAS,IAAI,cAAc,KAAK,EAAE,EAAE;QACzD,IAAI,GAAQ,CAAC;QACb,IAAI;YACF,gDAAgD;YAChD,GAAG,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC;SAC/B;QACD,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,yCAAqB,CAC7B,gCAAgC,cAAc,EAAE,CAAC,CAAC;SACrD;QAED,mEAAmE;QACnE,2DAA2D;QAC3D,IAAI,GAAG,CAAC,IAAI,KAAK,EAAE,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC7C,MAAM,IAAI,yCAAqB,CAC7B;EACN,cAAc,EAAE,CAAC,CAAC;SACf;KACF;IACD,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,OAAO,EAAE;QACzC,0EAA0E;QAC1E,oDAAoD;QACpD,IAAI,KAAK,KAAK,OAAO,IAAI,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE;YAC9D,EAAE,CAAC,YAAY,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;YACvC,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SAClC;aACI,IAAI,cAAc,KAAK,SAAS,EAAE;YACrC,uBAAuB;YACvB,EAAE,CAAC,YAAY,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;SACnD;KACF;SACI,IAAI,cAAc,KAAK,SAAS,EAAE;QACrC,sDAAsD;QACtD,EAAE,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;KACvC;IAED,MAAM,QAAQ,GACZ,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,aAAa,CAAC;IAChE,KAAK,MAAM,KAAK,IAAI,EAAE,CAAC,QAAQ,EAAE;QAC/B,IAAI,kBAAS,CAAC,KAAK,CAAC,EAAE;YACpB,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;SACvB;KACF;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAgB,KAAK,CAAC,EAAW;IAC/B,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAEb,OAAO,EAAE,CAAC;AACZ,CAAC;AAJD,sBAIC","sourcesContent":["/**\n * Simplification step 4.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright 2013, 2014 Mangalam Research Center for Buddhist Languages\n */\nimport { Element, isElement } from \"../parser\";\nimport { SchemaValidationError } from \"../schema-validation\";\n\nfunction walk(el: Element, parentLibrary: string): void {\n  const local = el.local;\n\n  const currentLibrary = el.getAttribute(\"datatypeLibrary\");\n  if (currentLibrary !== undefined && currentLibrary !== \"\") {\n    let url: URL;\n    try {\n      // tslint:disable-next-line:no-unused-expression\n      url = new URL(currentLibrary);\n    }\n    catch (e) {\n      throw new SchemaValidationError(\n        `invalid datatypeLibrary URL: ${currentLibrary}`);\n    }\n\n    // We have to test for \"#\" a the end of href because that's also an\n    // error per Relax NG but the hash will still be empty. :-/\n    if (url.hash !== \"\" || url.href.endsWith(\"#\")) {\n      throw new SchemaValidationError(\n        `datatypeLibrary URL must not have a fragment identifier: \\\n${currentLibrary}`);\n    }\n  }\n  if (local === \"data\" || local === \"value\") {\n    // ``value`` elements without a ``@type`` get ``@type`` set to ``\"token\"``\n    // and ``@datatypeLibrary`` set to the empty string.\n    if (local === \"value\" && el.getAttribute(\"type\") === undefined) {\n      el.setAttribute(\"datatypeLibrary\", \"\");\n      el.setAttribute(\"type\", \"token\");\n    }\n    else if (currentLibrary === undefined) {\n      // Inherit from parent.\n      el.setAttribute(\"datatypeLibrary\", parentLibrary);\n    }\n  }\n  else if (currentLibrary !== undefined) {\n    // All other elements lose their ``@datatypeLibrary``.\n    el.removeAttribute(\"datatypeLibrary\");\n  }\n\n  const childLib =\n    currentLibrary !== undefined ? currentLibrary : parentLibrary;\n  for (const child of el.children) {\n    if (isElement(child)) {\n      walk(child, childLib);\n    }\n  }\n}\n\n/**\n * Implements steps 4 and 5 of the XSL pipeline. Namely:\n *\n * - ``data`` and ``value`` elements that don't have ``@datatypeLibrary`` get\n *    one from the closest ancestor with such a value.\n *\n * - ``value`` elements without a ``@type`` get ``@type`` set to ``\"token\"`` and\n *    ``@datatypeLibrary`` set to the empty string. (This is irrespective of the\n *    1st transformation above.)\n *\n * - All elements other than ``data`` and ``value`` lose their\n *   ``@datatypeLibrary`` attribute.\n *\n * Note that this step currently does not perform any URI encoding required by\n * the Relax NG spec. As we speak, salve does not support loading arbitrary type\n * libraries, and the supported URIs do not need special encoding.\n *\n * Even in the general case, it is unclear that we need to perform the encoding\n * transformation *here*. The URIs could be passed as-are to a library that\n * performs the encoding before fetching.\n *\n * @param el The tree to process. It is modified in-place.\n *\n * @returns The new root of the tree.\n */\nexport function step4(el: Element): Element {\n  walk(el, \"\");\n\n  return el;\n}\n"]}