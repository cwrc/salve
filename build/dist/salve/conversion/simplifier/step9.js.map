{"version":3,"file":"step9.js","sourceRoot":"","sources":["../../../../../lib/salve/conversion/simplifier/step9.ts"],"names":[],"mappings":";;;AAAA;;;;;GAKG;AACH,sCAA+C;AAE/C;;;;;;;;GAQG;AACH,SAAgB,KAAK,CAAC,EAAW;IAC/B,kEAAkE;IAClE,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;QAC9C,MAAM,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC9B,IAAI,kBAAS,CAAC,KAAK,CAAC,EAAE;YACpB,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,EAAE;gBACzB,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7B,EAAE,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;iBAC7C;gBAED,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBAErB,uEAAuE;gBACvE,WAAW;gBACX,EAAE,EAAE,CAAC;aACN;iBACI;gBACH,KAAK,CAAC,KAAK,CAAC,CAAC;aACd;SACF;KACF;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AAvBD,sBAuBC","sourcesContent":["/**\n * Simplification step 9.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright 2013, 2014 Mangalam Research Center for Buddhist Languages\n */\nimport { Element, isElement } from \"../parser\";\n\n/**\n * Implements step 9 of the XSL pipeline. Namely:\n *\n * - ``div`` elements are replaced with their children.\n *\n * @param el The tree to process. It is modified in-place.\n *\n * @returns The new root of the tree.\n */\nexport function step9(el: Element): Element {\n  // We walk the children first so that subtrees are modified first.\n  for (let ix = 0; ix < el.children.length; ++ix) {\n    const child = el.children[ix];\n    if (isElement(child)) {\n      if (child.local === \"div\") {\n        if (child.children.length > 0) {\n          el.insertAt(ix + 1, child.children.slice());\n        }\n\n        el.removeChildAt(ix);\n\n        // Go back, and process what is the new child at the location where the\n        // div was.\n        --ix;\n      }\n      else {\n        step9(child);\n      }\n    }\n  }\n\n  return el;\n}\n"]}