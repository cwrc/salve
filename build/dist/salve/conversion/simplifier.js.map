{"version":3,"file":"simplifier.js","sourceRoot":"","sources":["../../../../lib/salve/conversion/simplifier.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,4CAA2C;AAAlC,8FAAA,KAAK,OAAA;AACd,kCAAkC;AAClC,4CAA2C;AAAlC,8FAAA,KAAK,OAAA;AACd,+BAA+B;AAC/B,4CAA2C;AAAlC,8FAAA,KAAK,OAAA;AACd,mCAAmC;AACnC,4CAA2C;AAAlC,8FAAA,KAAK,OAAA;AAEd,8CAA6C;AAApC,gGAAA,MAAM,OAAA;AACf,sCAAsC;AACtC,8CAA6C;AAApC,gGAAA,MAAM,OAAA;AACf,8CAA6C;AAApC,gGAAA,MAAM,OAAA;AACf,8CAA6C;AAApC,gGAAA,MAAM,OAAA;AACf,8CAA6C;AAApC,gGAAA,MAAM,OAAA;AACf,8CAA6C;AAApC,gGAAA,MAAM,OAAA","sourcesContent":["/**\n * Simplification support for trees produced by the parser module.\n *\n * This is an implementation in TypeScript of the XSLT pipeline we've been\n * using. The step numbers are equivalent to those in the XSLT pipeline with the\n * following exceptions:\n *\n * - Some steps are combined. The driving principles are:\n *\n *  + Steps are not combined if a later step is entirely dependent on the work\n *    of an earlier step.\n *\n *  + Steps are combined if they offer substantial performance benefits.\n *\n * Eventually the goal is to completely eliminate the XSLT pipeline. However,\n * during the transition phase we aim for relative parity with what the XSLT\n * pipeline does, in order to simplify testing. With a few small exceptions, we\n * can provide an input to a step and expect the same output in the XSLT and\n * TypeScript pipelines. So the TypeScript implementation may do things that\n * appears senseless. For instance, at some point all ``define`` elements are\n * renamed to make them unique, even those that do not have name clashes. We\n * replicate the XSLT process, where only renaming clashing defines would be\n * onerous. (It would also require the renaming operation to verify that new\n * names do not clash with those names that are not changed. If we change all\n * names, then this clash cannot occur.)\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright 2013, 2014 Mangalam Research Center for Buddhist Languages\n */\nexport { step1 } from \"./simplifier/step1\";\n// Step 2-3 are covered by step 1.\nexport { step4 } from \"./simplifier/step4\";\n// Step 5 is covered by step 4.\nexport { step6 } from \"./simplifier/step6\";\n// Steps 7-8 are covered by step 6.\nexport { step9 } from \"./simplifier/step9\";\n\nexport { step10 } from \"./simplifier/step10\";\n// Steps 11-13 are covered by step 10.\nexport { step14 } from \"./simplifier/step14\";\nexport { step15 } from \"./simplifier/step15\";\nexport { step16 } from \"./simplifier/step16\";\nexport { step17 } from \"./simplifier/step17\";\nexport { step18 } from \"./simplifier/step18\";\n"]}