{"version":3,"file":"text.js","sourceRoot":"","sources":["../../../../lib/salve/patterns/text.ts"],"names":[],"mappings":";;;AAAA;;;;;GAKG;AACH,sCAAsC;AACtC,iCACiC;AAEjC;;GAEG;AACH,MAAa,IAAK,SAAQ,cAAO;IAC/B,eAAe;QACb,mEAAmE;QACnE,+CAA+C;QAC/C,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS;QACP,iDAAiD;QACjD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAXD,oBAWC;AAED;;;;GAIG;AACH,MAAM,UAAU;IAMd;;OAEG;IACH,YAAY,EAAQ;QAClB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED,8DAA8D;IAC9D,+BAA+B;IAC/B,KAAK;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,GAAG,EAAE,CAAC;IACnB,CAAC;IAED,SAAS,CAAC,IAAY;QACpB,OAAO,IAAI,8BAAuB,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC;IACtD,CAAC;IAED,GAAG;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,aAAa;QACX,OAAO,KAAK,CAAC;IACf,CAAC;;AArCuB,qBAAU,GAAc,IAAI,kBAAS,CAAC,QAAQ,CAAC,CAAC;AAwC1E,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;AAE3D,yCAAyC","sourcesContent":["/**\n * Pattern and walker for RNG's ``text`` elements.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { TextEvent } from \"../events\";\nimport { EventSet, InternalFireEventResult, InternalWalker,\n         Pattern } from \"./base\";\n\n/**\n * Pattern for ``<text/>``.\n */\nexport class Text extends Pattern {\n  hasEmptyPattern(): boolean {\n    // A text node may always be a zero-length node, which mean that we\n    // effectively allow the container to be empty.\n    return true;\n  }\n\n  newWalker(): InternalWalker {\n    // tslint:disable-next-line:no-use-before-declare\n    return singleton;\n  }\n}\n\n/**\n *\n * Walker for [[Text]]\n *\n */\nclass TextWalker implements InternalWalker {\n  protected readonly el: Text;\n  private static readonly _textEvent: TextEvent = new TextEvent(/^[^]*$/);\n  canEnd: boolean;\n  canEndAttribute: boolean;\n\n  /**\n   * @param el The pattern for which this walker was constructed.\n   */\n  constructor(el: Text) {\n    this.el = el;\n    this.canEnd = true;\n    this.canEndAttribute = true;\n  }\n\n  // Since TextWalker is a singleton, the cloning operation just\n  // returns the original walker.\n  clone(): this {\n    return this;\n  }\n\n  possible(): EventSet {\n    return new Set([TextWalker._textEvent]);\n  }\n\n  possibleAttributes(): EventSet {\n    return new Set();\n  }\n\n  fireEvent(name: string): InternalFireEventResult {\n    return new InternalFireEventResult(name === \"text\");\n  }\n\n  end(): false {\n    return false;\n  }\n\n  endAttributes(): false {\n    return false;\n  }\n}\n\nconst singleton = new TextWalker(new Text(\"FAKE ELEMENT\"));\n\n//  LocalWords:  RNG's MPL possibleCached\n"]}