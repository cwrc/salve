{"version":3,"file":"list.js","sourceRoot":"","sources":["../../../../lib/salve/patterns/list.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Pattern and walker for RNG's ``list`` elements.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { ValidationError } from \"../errors\";\nimport { NameResolver } from \"../name_resolver\";\nimport { EndResult, EventSet, InternalFireEventResult, InternalWalker,\n         OneSubpattern } from \"./base\";\nimport { Define } from \"./define\";\n\n/**\n * List pattern.\n */\nexport class List extends OneSubpattern {\n  // We override these because lists cannot contain attributes so there's\n  // no point in caching _hasAttrs's result.\n  _prepare(definitions: Map<string, Define>, namespaces: Set<string>): void {\n    this.pat._prepare(definitions, namespaces);\n    this._cachedHasEmptyPattern = this.pat.hasEmptyPattern();\n  }\n\n  hasAttrs(): boolean {\n    return false;\n  }\n\n  newWalker(): InternalWalker {\n    const hasEmptyPattern = this.hasEmptyPattern();\n\n    // tslint:disable-next-line:no-use-before-declare\n    return new ListWalker(this,\n                          this.pat.newWalker(),\n                          hasEmptyPattern,\n                          hasEmptyPattern);\n  }\n}\n\n/**\n * Walker for [[List]].\n *\n */\nclass ListWalker implements InternalWalker {\n  constructor(protected readonly el: List,\n              private readonly subwalker: InternalWalker,\n              public canEndAttribute: boolean,\n              public canEnd: boolean) {}\n\n  clone(): this {\n    return new ListWalker(this.el,\n                          this.subwalker.clone(),\n                          this.canEndAttribute,\n                          this.canEnd) as this;\n  }\n\n  possible(): EventSet {\n    return this.subwalker.possible();\n  }\n\n  possibleAttributes(): EventSet {\n    return new Set();\n  }\n\n  fireEvent(name: string, params: string[],\n            nameResolver: NameResolver): InternalFireEventResult {\n    // Only this can match.\n    if (name !== \"text\") {\n      return new InternalFireEventResult(false);\n    }\n\n    const trimmed = params[0].trim();\n\n    // The list walker cannot send empty strings to its children because it\n    // validates a list of **tokens**.\n    if (trimmed === \"\") {\n      return new InternalFireEventResult(true);\n    }\n\n    // ret is necessarily set by the loop because we deal with the empty case\n    // above.\n    let ret!: InternalFireEventResult;\n    for (const token of trimmed.split(/\\s+/)) {\n      ret = this.subwalker.fireEvent(\"text\", [token], nameResolver);\n      if (!ret.matched) {\n        this.canEndAttribute = this.canEnd = false;\n\n        return ret;\n      }\n    }\n\n    this.canEndAttribute = this.canEnd = this.subwalker.canEnd;\n\n    // It is not possible for ret to be undefined here.\n    return ret;\n  }\n\n  end(): EndResult {\n    if (this.canEnd) {\n      return false;\n    }\n\n    const ret = this.subwalker.end();\n\n    return ret !== false ? ret : [new ValidationError(\"unfulfilled list\")];\n  }\n\n  endAttributes(): EndResult {\n    return false;\n  }\n}\n\n//  LocalWords:  RNG's MPL nd\n"]}