{"version":3,"file":"not_allowed.js","sourceRoot":"","sources":["../../../../lib/salve/patterns/not_allowed.ts"],"names":[],"mappings":";;;AAAA;;;;;GAKG;AACH,iCACiC;AAEjC;;GAEG;AACH,MAAa,UAAW,SAAQ,cAAO;IACrC,SAAS;QACP,iDAAiD;QACjD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AALD,gCAKC;AAED;;GAEG;AACH,MAAa,gBAAgB;IAK3B;;OAEG;IACH,YAAY,EAAc;QACxB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED,oEAAoE;IACpE,+BAA+B;IAC/B,KAAK;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,GAAG,EAAE,CAAC;IACnB,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,GAAG,EAAE,CAAC;IACnB,CAAC;IAED,SAAS;QACP,OAAO,IAAI,8BAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAkB;IAC/D,CAAC;IAED,GAAG;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,aAAa;QACX,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAvCD,4CAuCC;AAED,MAAM,SAAS,GAAG,IAAI,gBAAgB,CAAC,IAAI,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;AAEvE,yCAAyC","sourcesContent":["/**\n * Pattern and walker for RNG's ``notAllowed`` elements.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { EndResult, EventSet, InternalFireEventResult, InternalWalker,\n         Pattern } from \"./base\";\n\n/**\n * Pattern for ``<notAllowed/>``.\n */\nexport class NotAllowed extends Pattern {\n  newWalker(): NotAllowedWalker {\n    // tslint:disable-next-line:no-use-before-declare\n    return singleton;\n  }\n}\n\n/**\n * Walker for [[NotAllowed]];\n */\nexport class NotAllowedWalker implements InternalWalker {\n  protected readonly el: NotAllowed;\n  canEnd: boolean;\n  canEndAttribute: boolean;\n\n  /**\n   * @param el The pattern for which this walker was created.\n   */\n  constructor(el: NotAllowed) {\n    this.el = el;\n    this.canEnd = true;\n    this.canEndAttribute = true;\n  }\n\n  // Since NotAllowedWalker is a singleton, the cloning operation just\n  // returns the original walker.\n  clone(): this {\n    return this;\n  }\n\n  possible(): EventSet {\n    return new Set();\n  }\n\n  possibleAttributes(): EventSet {\n    return new Set();\n  }\n\n  fireEvent(): InternalFireEventResult {\n    return new InternalFireEventResult(false); // we never match!\n  }\n\n  end(): EndResult {\n    return false;\n  }\n\n  endAttributes(): EndResult {\n    return false;\n  }\n}\n\nconst singleton = new NotAllowedWalker(new NotAllowed(\"FAKE ELEMENT\"));\n\n//  LocalWords:  RNG's MPL possibleCached\n"]}