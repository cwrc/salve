{"version":3,"file":"xmlschema.js","sourceRoot":"","sources":["../../../../lib/salve/datatypes/xmlschema.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Implementation of the XMLSchema datatypes.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { TrivialMap } from \"../types\";\nimport { ParamError, ParameterParsingError, ValueError,\n         ValueValidationError } from \"./errors\";\nimport { Context, Datatype, ParsedParams, ParsedValue, RawParameter,\n         TypeLibrary } from \"./library\";\nimport * as regexp from \"./regexp\";\nimport { xmlNameChar, xmlNameRe, xmlNcname,\n         xmlNcnameRe } from \"./xmlcharacters\";\n\n// tslint:disable: no-reserved-keywords\n\n/**\n * Convert a number to an internal representation. This takes care of the\n * differences between JavaScript and XML Schema (e.g. \"Infinity\" vs \"INF\").\n *\n * @param value The value as expressed in an XML file or schema.\n *\n * @returns The number, in its internal representation.\n */\nfunction convertToInternalNumber(value: string): number {\n    if (value === \"INF\") {\n      return Infinity;\n    }\n\n    if (value === \"-INF\") {\n      return -Infinity;\n    }\n\n    return Number(value);\n}\n\n/**\n * Convert an internal representation of a number to a string. This takes care\n * of the differences between JavaScript and XML Schema. For instance, a value\n * of ``Infinity`` will be represented as the string ``\"INF\"``.\n *\n * @param number The internal representation.\n *\n * @returns The string representation.\n */\nfunction convertInternalNumberToString(value: number): string {\n  if (value === Infinity) {\n    return \"INF\";\n  }\n\n  if (value === -Infinity) {\n    return \"-INF\";\n  }\n\n  return value.toString();\n}\n\n//\n// The parameters\n//\n\n/**\n * A parameter used for XML Schema type processing.\n */\ninterface Parameter {\n\n  /**\n   * The name of this parameter.\n   */\n  readonly name: string;\n\n  /**\n   * Whether the parameter can appear more than once on the same type.\n   */\n  readonly repeatable: boolean;\n\n  /**\n   * Convert the parameter value from a string to a value to be used internally\n   * by this code.\n   *\n   * @param value The value to convert.\n   *\n   * @returns The converted value.\n   */\n  convert(value: string): any;\n\n  /**\n   * Checks whether a parameter is invalid.\n   *\n   * @param value The parameter value to check. This is the raw string from the\n   * schema, not a value converted by [[convert]].\n   *\n   * @param name The name of the parameter. This allows using generic functions\n   * to check on values.\n   *\n   * @param type The type for which this parameter is checked.\n   *\n   * @returns ``false`` if there is no problem. Otherwise, an error.\n   */\n  isInvalidParam(value: string, name: string,\n                 type: Datatype): ParamError | false;\n\n  /**\n   * Checks whether a value that appears in the XML document being validated is\n   * invalid according to this parameter.\n   *\n   * @param value The value from the XML document. This is the parsed\n   * value, converted by [[\"datatypes/library\".Datatype.parseValue]].\n   *\n   * @param param The parameter value. This must be the value obtained from\n   * [[convert]].\n   *\n   * @param type The type for which this parameter is checked.\n   *\n   * @returns ``false`` if there is no problem. Otherwise, an error.\n   */\n  isInvalidValue(value: any, param: any, type: Base<{}>): ValueError | false;\n}\n\nabstract class NumericParameter implements Parameter {\n  abstract readonly name: string;\n  abstract readonly repeatable: boolean;\n\n  abstract isInvalidParam(value: string, name: string,\n                          type: Datatype): ParamError | false;\n  abstract isInvalidValue(value: any, param: any,\n                          type: Base<{}>): ValueError | false;\n\n  convert(value: string): any {\n    return convertToInternalNumber(value);\n  }\n}\n\nabstract class NonNegativeIntegerParameter extends NumericParameter {\n  isInvalidParam(value: string, name: string): ParamError | false {\n    const asNum = Number(value);\n    if (Number.isInteger(asNum) && asNum >= 0) {\n      return false;\n    }\n\n    return new ParamError(`${name} must have a non-negative integer value`);\n  }\n}\n\nclass LengthP extends NonNegativeIntegerParameter {\n  readonly name: string = \"length\";\n  readonly repeatable: boolean = false;\n\n  isInvalidValue(value: any, param: any, type: Base<{}>): ValueError | false {\n    if (type.valueLength(value) === param) {\n      return false;\n    }\n\n    return new ValueError(`length of value should be ${param}`);\n  }\n}\n\nconst lengthP = new LengthP();\n\nclass MinLengthP extends NonNegativeIntegerParameter {\n  readonly name: string = \"minLength\";\n  readonly repeatable: boolean = false;\n\n  isInvalidValue(value: any, param: any, type: Base<{}>): ValueError | false {\n    if (type.valueLength(value) >= param) {\n      return false;\n    }\n\n    return new ValueError(\"length of value should be greater than \" +\n                          `or equal to ${param}`);\n  }\n}\n\nconst minLengthP = new MinLengthP();\n\nclass MaxLengthP extends NonNegativeIntegerParameter {\n  readonly name: string = \"maxLength\";\n  readonly repeatable: boolean = false;\n\n  isInvalidValue(value: any, param: any, type: Base<{}>): ValueError | false {\n    if (type.valueLength(value) <= param) {\n      return false;\n    }\n\n    return new ValueError(\"length of value should be less than \" +\n                          `or equal to ${param}`);\n  }\n\n}\n\nconst maxLengthP = new MaxLengthP();\n\n//\n// pattern is special. It converts the param value found in the RNG file into an\n// object with two fields: ``rng`` and ``internal``. RNG is the string value\n// from the RNG file, and ``internal`` is a representation internal to salve. We\n// use ``internal`` for performing the validation but present ``rng`` to the\n// user. Note that if pattern appears multiple times as a parameter, the two\n// values are the result of the concatenation of all the instance of the pattern\n// parameter. (Why this? Because it would be confusing to show the internal\n// value in error messages to the user.)\n//\n\n/**\n * A mapping of raw schema values to the corresponding ``RegExp`` object.\n */\nconst reCache: TrivialMap<RegExp> = Object.create(null);\n\nexport interface ConvertedPattern {\n  rng: string;\n  internal: RegExp;\n}\n\nclass PatternP implements Parameter {\n  readonly name: string = \"pattern\";\n  readonly repeatable: boolean = true;\n\n  convert(value: string): ConvertedPattern {\n    let internal = reCache[value];\n    if (internal === undefined) {\n      internal = reCache[value] = regexp.parse(value);\n    }\n\n    return {\n      rng: value,\n      internal,\n    };\n  }\n\n  isInvalidParam(value: string): ParamError | false {\n    try {\n      this.convert(value);\n    }\n    catch (ex) {\n      // Convert the error into something that makes sense for salve.\n      if (ex instanceof regexp.SalveParsingError) {\n        return new ParamError(ex.message);\n      }\n\n      // Rethrow\n      throw ex;\n    }\n\n    return false;\n  }\n\n  isInvalidValue(value: any,\n                 param: ConvertedPattern | ConvertedPattern[]):\n  ValueError | false {\n    if (param instanceof Array) {\n      let failedOn: any;\n      for (const p of param) {\n        if (!p.internal.test(value)) {\n          failedOn = p;\n          break;\n        }\n      }\n\n      if (failedOn === undefined) {\n        return false;\n      }\n\n      return new ValueError(`value does not match the pattern ${failedOn.rng}`);\n    }\n\n    if (param.internal.test(value)) {\n      return false;\n    }\n\n    return new ValueError(`value does not match the pattern ${param.rng}`);\n  }\n}\n\nconst patternP = new PatternP();\n\nclass TotalDigitsP extends NumericParameter {\n  readonly name: string = \"totalDigits\";\n  readonly repeatable: boolean = false;\n\n  isInvalidParam(value: string, name: string): ParamError | false {\n    const asNum = Number(value);\n    if (Number.isInteger(asNum) && asNum > 0) {\n      return false;\n    }\n\n    return new ParamError(`${name} must have a positive value`);\n  }\n\n  isInvalidValue(value: any, param: any): ValueError | false {\n    const str = String(Number(value)).replace(/[-+.]/g, \"\");\n    if (str.length > param) {\n      return new ValueError(`value must have at most ${param} digits`);\n    }\n\n    return false;\n  }\n}\n\nconst totalDigitsP = new TotalDigitsP();\n\nclass FractionDigitsP extends NonNegativeIntegerParameter {\n  readonly name: string = \"fractionDigits\";\n  readonly repeatable: boolean = false;\n\n  isInvalidValue(value: any, param: any): ValueError | false {\n    const str = String(Number(value)).replace(/^.*\\./, \"\");\n    if (str.length > param) {\n      return new ValueError(`value must have at most ${param} fraction digits`);\n    }\n\n    return false;\n  }\n}\n\nabstract class NumericTypeDependentParameter extends NumericParameter {\n  isInvalidParam(value: any, name: string, type: Base<{}>): ParamError | false {\n    const errors = type.disallows(value, type.defaultParams);\n    if (!errors) {\n      return false;\n    }\n\n    // Support for multiple value errors is mainly so that we can report if a\n    // value violates multiple param specifications. When we check a param in\n    // isolation, it is unlikely that we'd get multiple errors. If we do, we\n    // narrow it to the first error and convert the ValueError to a ParamError.\n    return new ParamError(errors[0].message);\n  }\n}\n\nconst fractionDigitsP = new FractionDigitsP();\n\nclass MaxInclusiveP extends NumericTypeDependentParameter {\n  readonly name: string = \"maxInclusive\";\n  readonly repeatable: boolean = false;\n\n  isInvalidValue(value: any, param: any): ValueError | false {\n    if ((isNaN(value) !== isNaN(param)) || value > param) {\n      const repr = convertInternalNumberToString(param);\n\n      return new ValueError(`value must be less than or equal to ${repr}`);\n    }\n\n    return false;\n  }\n}\n\nconst maxInclusiveP = new MaxInclusiveP();\n\nclass MaxExclusiveP extends NumericTypeDependentParameter {\n  readonly name: string = \"maxExclusive\";\n  readonly repeatable: boolean = false;\n\n  isInvalidValue(value: any, param: any): ValueError | false {\n    // The negation of a less-than test allows handling a parameter value of NaN\n    // automatically.\n    if (!(value < param)) {\n      const repr = convertInternalNumberToString(param);\n\n      return new ValueError(`value must be less than ${repr}`);\n    }\n\n    return false;\n  }\n}\n\nconst maxExclusiveP = new MaxExclusiveP();\n\nclass MinInclusiveP extends NumericTypeDependentParameter {\n  readonly name: string = \"minInclusive\";\n  readonly repeatable: boolean = false;\n\n  isInvalidValue(value: any, param: any): ValueError | false {\n    if ((isNaN(value) !== isNaN(param)) || value < param) {\n      const repr = convertInternalNumberToString(param);\n\n      return new ValueError(`value must be greater than or equal to ${repr}`);\n    }\n\n    return false;\n  }\n}\n\nconst minInclusiveP = new MinInclusiveP();\n\nclass MinExclusiveP extends NumericTypeDependentParameter {\n  readonly name: string = \"minExclusive\";\n  readonly repeatable: boolean = false;\n\n  isInvalidValue(value: any, param: any): ValueError | false {\n    // The negation of a greater-than test allows handling a parameter value of\n    // NaN automatically.\n    if (!(value > param)) {\n      const repr = convertInternalNumberToString(param);\n\n      return new ValueError(`value must be greater than ${repr}`);\n    }\n\n    return false;\n  }\n}\n\nconst minExclusiveP = new MinExclusiveP();\n\n/**\n * A mapping of parameter names to parameter objects.\n */\nconst PARAM_NAME_TO_OBJ: TrivialMap<Parameter> = Object.create(null);\n\nfor (const param of [lengthP, minLengthP, maxLengthP, patternP, totalDigitsP,\n                     fractionDigitsP, minExclusiveP, minInclusiveP,\n                     maxExclusiveP, maxInclusiveP]) {\n  PARAM_NAME_TO_OBJ[param.name] = param;\n}\n\nconst EMPTY_PARAMS: ParsedParams = Object.create(null);\n\n/**\n * The structure that all datatype implementations in this module share.\n *\n * @private\n *\n */\nabstract class Base<T> implements Datatype<T> {\n  abstract readonly name: string;\n  abstract readonly needsContext: boolean;\n  abstract readonly regexp: RegExp;\n\n  /**\n   * The error message to give if a value is disallowed.\n   */\n  readonly typeErrorMsg: string;\n\n  /**\n   * Parameters that are valid for this type.\n   */\n  readonly validParams: ReadonlyArray<Parameter>;\n\n  /**\n   * The default parameters if none are specified.\n   */\n  get defaultParams(): ParsedParams {\n    return EMPTY_PARAMS;\n  }\n\n  /**\n   * Converts a value. It does the strict minimum to convert the value from a\n   * string to an internal representation. It is never interchangeable with\n   * [[parseValue]].\n   *\n   * @param value The value from the XML document.\n   *\n   * @param context The context of the value in the XML document.\n   *\n   * @returns An internal representation. Or an array of ValueError if the value\n   * cannot be converted.\n   */\n  protected abstract convertValue(value: string,\n                                  context?: Context): T | ValueError[];\n\n  /**\n   * Computes the value's length. This may differ from the value's length, as it\n   * appears in the XML document it comes from.\n   *\n   * @param value The value from the XML document.\n   *\n   * @returns The length.\n   */\n  valueLength(value: string): number {\n    return value.length;\n  }\n\n  parseValue(location: string, value: string,\n             context?: Context): ParsedValue<T> {\n    const errors = this.disallows(value, this.defaultParams, context);\n    if (errors) {\n      throw new ValueValidationError(location, errors);\n    }\n\n    const result = this.convertValue(value, context);\n    if (result instanceof Array) {\n      throw new ValueValidationError(location, result);\n    }\n\n    return { value: result };\n  }\n\n  // tslint:disable-next-line: max-func-body-length\n  parseParams(location: string, params?: RawParameter[]): ParsedParams {\n    const ret: TrivialMap<string[]> = Object.create(null);\n    if (params === undefined) {\n      return ret;\n    }\n\n    const errors: ParamError[] = [];\n    for (const x of params) {\n      const { name, value } = x;\n\n      const prop = PARAM_NAME_TO_OBJ[name];\n\n      // Do we know this parameter?\n      if (prop === undefined || !this.validParams.includes(prop)) {\n        errors.push(new ParamError(`unexpected parameter: ${name}`));\n\n        continue;\n      }\n\n      // Is the value valid at all?\n      const invalid = prop.isInvalidParam(value, name, this);\n      if (invalid) {\n        errors.push(invalid);\n      }\n      else {\n        const converted = prop.convert(value);\n        const values = ret[name];\n        // We gather all the values in a map of name to value.\n        if (values === undefined) {\n          ret[name] = converted;\n        }\n        else {\n          if (!prop.repeatable) {\n            errors.push(new ParamError(`cannot repeat parameter ${name}`));\n          }\n          if (Array.isArray(values)) {\n            values.push(converted);\n          }\n          else {\n            ret[name] = [values, converted];\n          }\n        }\n      }\n    }\n\n    if (errors.length !== 0) {\n      throw new ParameterParsingError(location, errors);\n    }\n\n    // Inter-parameter checks. There's no point in trying to generalize\n    // this.\n\n    const { minLength, maxLength, maxInclusive, maxExclusive, minInclusive,\n            minExclusive } = ret;\n    if (minLength > maxLength) {\n      errors.push(new ParamError(\n        \"minLength must be less than or equal to maxLength\"));\n    }\n\n    if (ret.length !== undefined) {\n      if (minLength !== undefined) {\n        errors.push(new ParamError(\n          \"length and minLength cannot appear together\"));\n      }\n      if (maxLength !== undefined) {\n        errors.push(new ParamError(\n          \"length and maxLength cannot appear together\"));\n      }\n    }\n\n    if (maxInclusive !== undefined) {\n      if (maxExclusive !== undefined) {\n        errors.push(new ParamError(\n          \"maxInclusive and maxExclusive cannot appear together\"));\n      }\n\n      // maxInclusive, minExclusive\n      if (minExclusive >= maxInclusive) {\n        errors.push(new ParamError(\n          \"minExclusive must be less than maxInclusive\"));\n      }\n    }\n\n    if (minInclusive !== undefined) {\n      if (minExclusive !== undefined) {\n        errors.push(new ParamError(\n          \"minInclusive and minExclusive cannot appear together\"));\n      }\n\n      // maxInclusive, minInclusive\n      if (minInclusive > maxInclusive) {\n        errors.push(new ParamError(\n          \"minInclusive must be less than or equal to maxInclusive\"));\n      }\n\n      // maxExclusive, minInclusive\n      if (minInclusive >= maxExclusive) {\n        errors.push(new ParamError(\n          \"minInclusive must be less than maxExclusive\"));\n      }\n    }\n\n    // maxExclusive, minExclusive\n    if (minExclusive > maxExclusive) {\n      errors.push(new ParamError(\n        \"minExclusive must be less than or equal to maxExclusive\"));\n    }\n\n    if (errors.length !== 0) {\n      throw new ParameterParsingError(location, errors);\n    }\n\n    return ret;\n  }\n\n  equal(value: string, schemaValue: ParsedValue<T>,\n        context?: Context): boolean {\n    const converted = this.convertValue(value, context);\n    return converted instanceof Array ? false :\n      converted === schemaValue.value;\n  }\n\n  disallows(value: string, params: ParsedParams,\n            context?: Context): ValueError[] | false {\n    if (!this.regexp.test(value)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    const paramNames = Object.keys(params);\n    if (paramNames.length === 0) {\n      return false;\n    }\n\n    const converted = this.convertValue(value, context);\n    if (converted instanceof Array) {\n      return converted;\n    }\n\n    const errors: ValueError[] = [];\n    for (const name of paramNames) {\n      const param = PARAM_NAME_TO_OBJ[name];\n      const err = param.isInvalidValue(converted, params[name], this);\n      if (err) {\n        errors.push(err);\n      }\n    }\n\n    return (errors.length !== 0) ? errors : false;\n  }\n}\n\n//\n// String family\n//\n\nabstract class CommonStringBased extends Base<string> {\n  protected convertValue(value: string): string {\n    return value.trim().replace(/\\s+/g, \" \");\n  }\n}\n\n/* tslint:disable:class-name */\nclass string_ extends CommonStringBased {\n  readonly name: string = \"string\";\n  readonly typeErrorMsg: string = \"value is not a string\";\n  readonly validParams: Parameter[] = [lengthP, minLengthP, maxLengthP,\n                                       patternP];\n  readonly needsContext: boolean = false;\n  // [^] means \"any character\". The dot would exclude line terminators (\\r\\n,\n  // etc.).\n  readonly regexp: RegExp = /^[^]*$/;\n\n  protected convertValue(value: string): string {\n    return value;\n  }\n\n  // This is a specialized version of disallows that avoids bothering with tests\n  // that don't affect the results. string and some of its immediate derivates\n  // are not affected by their regexp, nor do they have default parameters that\n  // affect what values are allowed.\n  disallows(value: string, params: ParsedParams): ValueError[] | false {\n    if (Object.keys(params).length === 0) {\n      // The default params don't disallow anything.\n      return false;\n    }\n\n    const converted = this.convertValue(value);\n    const errors: ValueError[] = [];\n    // We use Object.keys because we don't know the precise type of params.\n    for (const name of Object.keys(params)) {\n      const param = PARAM_NAME_TO_OBJ[name];\n      const err = param.isInvalidValue(converted, params[name], this);\n      if (err) {\n        errors.push(err);\n      }\n    }\n\n    return (errors.length !== 0) ? errors : false;\n  }\n}\n\nclass normalizedString extends string_ {\n  readonly name: string = \"normalizedString\";\n  readonly typeErrorMsg: string =\n    \"string contains a tab, carriage return or newline\";\n\n  protected convertValue(value: string): string {\n    return value.replace(/\\s+/g, \" \");\n  }\n}\n\nclass token extends normalizedString {\n  readonly name: string = \"token\";\n  readonly typeErrorMsg: string = \"not a valid token\";\n\n  protected convertValue(value: string): string {\n    return value.trim().replace(/\\s+/g, \" \");\n  }\n}\n\nclass tokenInternal extends token {\n  disallows(value: string, params: ParsedParams): ValueError[] | false {\n    if (!this.regexp.test(value)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    return super.disallows(value, params);\n  }\n}\n\nclass language extends tokenInternal {\n  readonly name: string = \"language\";\n  readonly typeErrorMsg: string = \"not a valid language identifier\";\n  readonly regexp: RegExp = /^\\s*[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*\\s*$/;\n}\n\nclass Name extends tokenInternal {\n  readonly name: string = \"Name\";\n  readonly typeErrorMsg: string = \"not a valid Name\";\n  readonly regexp: RegExp = xmlNameRe;\n}\n\nclass NCName extends Name {\n  readonly name: string = \"NCName\";\n  readonly typeErrorMsg: string = \"not a valid NCName\";\n  readonly regexp: RegExp = xmlNcnameRe;\n}\n\nclass NMTOKEN extends tokenInternal {\n  readonly name: string = \"NMTOKEN\";\n  readonly typeErrorMsg: string = \"not a valid NMTOKEN\";\n  readonly regexp: RegExp = new RegExp(`^\\\\s*[${xmlNameChar}]+\\\\s*$`);\n}\n\nclass NMTOKENS extends NMTOKEN {\n  readonly name: string = \"NMTOKENS\";\n  readonly typeErrorMsg: string = \"not a valid NMTOKENS\";\n  readonly regexp: RegExp =\n    new RegExp(`^\\\\s*[${xmlNameChar}]+(?:\\\\s+[${xmlNameChar}]+)*\\\\s*$`);\n}\n\nclass ID extends NCName {\n  readonly name: string = \"ID\";\n  readonly typeErrorMsg: string = \"not a valid ID\";\n}\n\nclass IDREF extends NCName {\n  readonly name: string = \"IDREF\";\n  readonly typeErrorMsg: string = \"not a valid IDREF\";\n}\n\nclass IDREFS extends IDREF {\n  readonly name: string = \"IDREFS\";\n  readonly typeErrorMsg: string = \"not a valid IDREFS\";\n  readonly regexp: RegExp =\n    new RegExp(`^\\\\s*${xmlNcname}(?:\\\\s+${xmlNcname})*\\\\s*$`);\n}\n\nclass ENTITY extends NCName {\n  readonly name: string = \"ENTITY\";\n  readonly typeErrorMsg: string = \"not a valid ENTITY\";\n}\n\nclass ENTITIES extends ENTITY {\n  readonly name: string = \"ENTITIES\";\n  readonly typeErrorMsg: string = \"not a valid ENTITIES\";\n  readonly regexp: RegExp =\n    new RegExp(`^\\\\s*${xmlNcname}(?:\\\\s+${xmlNcname})*\\\\s*$`);\n}\n\n//\n// Decimal family\n//\n\nconst decimalPattern: string = \"[-+]?(?!$)\\\\d*(\\\\.\\\\d*)?\";\nclass decimal extends Base<number> {\n  readonly name: string = \"decimal\";\n  readonly typeErrorMsg: string = \"value not a decimal number\";\n  readonly regexp: RegExp = new RegExp(`^\\\\s*${decimalPattern}\\\\s*$`);\n  readonly needsContext: boolean = false;\n\n  readonly validParams: Parameter[] = [\n    totalDigitsP, fractionDigitsP, patternP, minExclusiveP, minInclusiveP,\n    maxExclusiveP, maxInclusiveP,\n  ];\n\n  convertValue(value: string): number {\n    // We don't need to do white-space processing on the value.\n    return Number(value);\n  }\n}\n\nconst integerPattern: string = \"[-+]?\\\\d+\";\nclass integer extends decimal {\n  readonly name: string = \"integer\";\n  readonly typeErrorMsg: string = \"value is not an integer\";\n  readonly regexp: RegExp = new RegExp(`^\\\\s*${integerPattern}\\\\s*$`);\n\n  readonly highestVal: number | undefined;\n  readonly lowestVal: number | undefined;\n\n  readonly validParams: Parameter[] = [\n    totalDigitsP, patternP, minExclusiveP, minInclusiveP, maxExclusiveP,\n    maxInclusiveP,\n  ];\n\n  protected _defaultParams?: ParsedParams;\n\n  get defaultParams(): ParsedParams {\n    if (this._defaultParams === undefined) {\n      const params = this._defaultParams = Object.create(null);\n      const { highestVal, lowestVal } = this;\n      if (highestVal !== undefined) {\n        params.maxInclusive = highestVal;\n      }\n\n      if (lowestVal !== undefined) {\n        params.minInclusive = lowestVal;\n      }\n\n      return params;\n    }\n\n    return this._defaultParams;\n  }\n\n  parseParams(location: string, params?: RawParameter[]): ParsedParams {\n    const ret = super.parseParams(location, params);\n\n    function fail(message: string): never {\n      throw new ParameterParsingError(location, [new ParamError(message)]);\n    }\n\n    const { highestVal, lowestVal } = this;\n    if (highestVal !== undefined) {\n      const me = ret.maxExclusive;\n      if (me !== undefined) {\n        if (me > highestVal) {\n          fail(`maxExclusive cannot be greater than ${highestVal}`);\n        }\n      }\n      else {\n        const mi = ret.maxInclusive;\n        if (mi !== undefined) {\n          if (mi > highestVal) {\n            fail(`maxInclusive cannot be greater than ${highestVal}`);\n          }\n        }\n        else {\n          ret.maxInclusive = highestVal;\n        }\n      }\n    }\n\n    if (lowestVal !== undefined) {\n      const me = ret.minExclusive;\n      if (me !== undefined) {\n        if (me < lowestVal) {\n          fail(`minExclusive cannot be lower than ${this.lowestVal}`);\n        }\n      }\n      else {\n        const mi = ret.minInclusive;\n        if (mi !== undefined) {\n          if (mi < lowestVal) {\n            fail(`minInclusive cannot be lower than ${this.lowestVal}`);\n          }\n        }\n        else {\n          ret.minInclusive = lowestVal;\n        }\n      }\n    }\n\n    return ret;\n  }\n}\n\nclass nonPositiveInteger extends integer {\n  readonly name: string = \"nonPositiveInteger\";\n  readonly typeErrorMsg: string = \"value is not a nonPositiveInteger\";\n  readonly regexp: RegExp = /^\\s*\\+?0+|-\\d+\\s*$/;\n  readonly highestVal: number = 0;\n  readonly validParams: Parameter[] = [\n    totalDigitsP, patternP, minExclusiveP, minInclusiveP, maxExclusiveP,\n    maxInclusiveP,\n  ];\n}\n\nclass negativeInteger extends nonPositiveInteger {\n  readonly name: string = \"negativeInteger\";\n  readonly typeErrorMsg: string = \"value is not a negativeInteger\";\n  readonly regexp: RegExp = /^\\s*-\\d+\\s*$/;\n  readonly highestVal: number = -1;\n  readonly validParams: Parameter [] = [\n    totalDigitsP, patternP, minExclusiveP, minInclusiveP, maxExclusiveP,\n    maxInclusiveP,\n  ];\n}\n\nclass nonNegativeInteger extends integer {\n  readonly name: string = \"nonNegativeInteger\";\n  readonly typeErrorMsg: string = \"value is not a nonNegativeInteger\";\n  readonly regexp: RegExp = /^\\s*(\\+?\\d+|-0)\\s*$/;\n  readonly lowestVal: number = 0;\n  readonly validParams: Parameter[] = [\n    totalDigitsP, patternP, minExclusiveP, minInclusiveP, maxExclusiveP,\n    maxInclusiveP,\n  ];\n}\n\nclass positiveInteger extends nonNegativeInteger {\n  readonly name: string = \"positiveInteger\";\n  readonly typeErrorMsg: string = \"value is not a positiveInteger\";\n  readonly regexp: RegExp = /^\\s*\\+?\\d+\\s*$/;\n  readonly lowestVal: number = 1;\n  readonly validParams: Parameter[] = [\n    totalDigitsP, patternP, minExclusiveP, minInclusiveP, maxExclusiveP,\n    maxInclusiveP,\n  ];\n}\n\nclass long_ extends integer {\n  readonly name: string = \"long\";\n  readonly typeErrorMsg: string = \"value is not a long\";\n  readonly highestVal: number = 9223372036854775807;\n  readonly lowestVal: number = -9223372036854775808;\n  readonly validParams: Parameter[] = [\n    totalDigitsP, patternP, minExclusiveP, minInclusiveP, maxExclusiveP,\n    maxInclusiveP,\n  ];\n}\n\nclass int_ extends long_ {\n  readonly name: string = \"int\";\n  readonly typeErrorMsg: string = \"value is not an int\";\n  readonly highestVal: number = 2147483647;\n  readonly lowestVal: number = -2147483648;\n}\n\nclass short_ extends int_ {\n  readonly name: string = \"short\";\n  readonly typeErrorMsg: string = \"value is not a short\";\n  readonly highestVal: number = 32767;\n  readonly lowestVal: number = -32768;\n}\n\nclass byte_ extends short_ {\n  readonly name: string = \"byte\";\n  readonly typeErrorMsg: string = \"value is not a byte\";\n  readonly highestVal: number = 127;\n  readonly lowestVal: number = -128;\n}\n\nclass unsignedLong extends nonNegativeInteger {\n  readonly name: string = \"unsignedLong\";\n  readonly typeErrorMsg: string = \"value is not an unsignedLong\";\n  readonly highestVal: number = 18446744073709551615;\n  readonly validParams: Parameter[] = [\n    totalDigitsP, patternP, minExclusiveP, minInclusiveP, maxExclusiveP,\n    maxInclusiveP,\n  ];\n}\n\nclass unsignedInt extends unsignedLong {\n  readonly name: string = \"unsignedInt\";\n  readonly typeErrorMsg: string = \"value is not an unsignedInt\";\n  readonly highestVal: number = 4294967295;\n  readonly validParams: Parameter[] = [\n    totalDigitsP, patternP, minExclusiveP, minInclusiveP, maxExclusiveP,\n    maxInclusiveP,\n  ];\n}\n\nclass unsignedShort extends unsignedInt {\n  readonly name: string = \"unsignedShort\";\n  readonly typeErrorMsg: string = \"value is not an unsignedShort\";\n  readonly highestVal: number = 65535;\n  readonly validParams: Parameter[] = [\n    totalDigitsP, patternP, minExclusiveP, minInclusiveP, maxExclusiveP,\n    maxInclusiveP,\n  ];\n}\n\nclass unsignedByte extends unsignedShort {\n  readonly name: string = \"unsignedByte\";\n  readonly typeErrorMsg: string = \"value is not an unsignedByte\";\n  readonly highestVal: number = 255;\n  readonly validParams: Parameter[] = [\n    totalDigitsP, patternP, minExclusiveP, minInclusiveP, maxExclusiveP,\n    maxInclusiveP,\n  ];\n}\n\nclass boolean_ extends Base<boolean> {\n  readonly name: string = \"boolean\";\n  readonly typeErrorMsg: string = \"not a valid boolean\";\n  readonly regexp: RegExp = /^\\s*(1|0|true|false)\\s*$/;\n  readonly validParams: Parameter[] = [patternP];\n  readonly needsContext: boolean = false;\n  convertValue(value: string): boolean {\n    return (value === \"1\" || value === \"true\");\n  }\n}\n\nconst B04: string = \"[AQgw]\";\nconst B16: string = \"[AEIMQUYcgkosw048]\";\nconst B64: string  = \"[A-Za-z0-9+/]\";\n\nconst B64S: string  = `(?:${B64}\\\\s*)`;\nconst B16S: string  = `(?:${B16}\\\\s*)`;\nconst B04S: string  = `(?:${B04}\\\\s*)`;\n\nconst base64BinaryRe: RegExp = new RegExp(\n  `^\\\\s*(?:(?:${B64S}{4})*(?:(?:${B64S}{3}${B64})|(?:${B64S}{2}${B16S}=)|(?:` +\n    `${B64S}${B04S}= ?=)))?\\\\s*$`);\n\nclass base64Binary extends Base<string> {\n  readonly name: string = \"base64Binary\";\n  readonly typeErrorMsg: string = \"not a valid base64Binary\";\n  readonly regexp: RegExp = base64BinaryRe;\n  readonly needsContext: boolean = false;\n  readonly validParams: Parameter[] =\n    [lengthP, minLengthP, maxLengthP, patternP];\n  convertValue(value: string): string {\n    // We don't need to actually decode it.\n    return value.replace(/\\s/g, \"\");\n  }\n  valueLength(value: string): number {\n    // Length of the decoded value.\n    return Math.floor((value.replace(/[\\s=]/g, \"\").length * 3) / 4);\n  }\n}\n\nclass hexBinary extends Base<string> {\n  readonly name: string = \"hexBinary\";\n  readonly typeErrorMsg: string = \"not a valid hexBinary\";\n  readonly regexp: RegExp = /^\\s*(?:[0-9a-fA-F]{2})*\\s*$/;\n  readonly needsContext: boolean = false;\n  readonly validParams: Parameter[] =\n    [lengthP, minLengthP, maxLengthP, patternP];\n  convertValue(value: string): string {\n    return value;\n  }\n\n  valueLength(value: string): number {\n    // Length of the byte list.\n    return value.length / 2;\n  }\n}\n\nconst doubleRe = new RegExp(\n  `^\\\\s*(?:(?:[-+]?INF)|(?:NaN)|(?:${decimalPattern}\\\n(?:[Ee]${integerPattern})?))\\\\s*$`);\n\nclass float_ extends Base<number> {\n  readonly name: string = \"float\";\n  readonly typeErrorMsg: string = \"not a valid float\";\n  readonly regexp: RegExp = doubleRe;\n  readonly needsContext: boolean = false;\n  readonly validParams: Parameter[] = [\n    patternP, minInclusiveP, minExclusiveP, maxInclusiveP, maxExclusiveP,\n  ];\n\n  convertValue(value: string): number {\n    return convertToInternalNumber(value);\n  }\n\n  equal(value: string, schemaValue: ParsedValue<number>): boolean {\n    const converted = this.convertValue(value);\n    // In the IEEE 754-1985 standard, which is what XMLSChema 1.0 follows, NaN\n    // is equal to NaN. In JavaScript NaN is equal to nothing, not even itself.\n    // So we need to handle this difference.\n    if (isNaN(converted)) {\n      return isNaN(schemaValue.value);\n    }\n\n    return converted === schemaValue.value;\n  }\n}\n\nclass double_ extends float_ {\n  readonly name: string = \"double\";\n  readonly typeErrorMsg: string = \"not a valid double\";\n}\n\nclass QName extends Base<string> {\n  readonly name: string = \"QName\";\n  readonly typeErrorMsg: string = \"not a valid QName\";\n  readonly regexp: RegExp =\n    new RegExp(`^\\\\s*(?:${xmlNcname}:)?${xmlNcname}\\\\s*$`);\n  readonly needsContext: boolean = true;\n  readonly validParams: Parameter[] =\n    [patternP, lengthP, minLengthP, maxLengthP];\n\n  disallows(value: string, params: ParsedParams,\n            context: Context): ValueError[] | false {\n    if (!this.regexp.test(value)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    const converted = this.convertValue(value, context);\n    if (converted instanceof Array) {\n      return converted;\n    }\n\n    const paramNames = Object.keys(params);\n    if (paramNames.length === 0) {\n      return false;\n    }\n\n    const errors: ValueError[] = [];\n    for (const name of paramNames) {\n      const param = PARAM_NAME_TO_OBJ[name];\n      const err = param.isInvalidValue(converted, params[name], this);\n      if (err) {\n        errors.push(err);\n      }\n    }\n\n    return (errors.length !== 0) ? errors : false;\n  }\n\n  convertValue(value: string, context: Context): string | ValueError[] {\n    const ret = context.resolver.resolveName(value.trim());\n    if (ret === undefined) {\n      return [new ValueError(`cannot resolve the name ${value}`)];\n    }\n\n    return `{${ret.ns}}${ret.name}`;\n  }\n}\n\nclass NOTATION extends Base<string> {\n  readonly name: string = \"NOTATION\";\n  readonly typeErrorMsg: string = \"not a valid NOTATION\";\n  readonly regexp: RegExp =\n    new RegExp(`^\\\\s*(?:${xmlNcname}:)?${xmlNcname}\\\\s*$`);\n  readonly needsContext: boolean = true;\n  readonly validParams: Parameter[] =\n    [patternP, lengthP, minLengthP, maxLengthP];\n\n  disallows(value: string, params: ParsedParams,\n            context: Context): ValueError[] | false {\n    if (!this.regexp.test(value)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    const converted = this.convertValue(value, context);\n    if (converted instanceof Array) {\n      return converted;\n    }\n\n    const paramNames = Object.keys(params);\n    if (paramNames.length === 0) {\n      return false;\n    }\n\n    const errors: ValueError[] = [];\n    for (const name of paramNames) {\n      const param = PARAM_NAME_TO_OBJ[name];\n      const err = param.isInvalidValue(converted, params[name], this);\n      if (err) {\n        errors.push(err);\n      }\n    }\n\n    return (errors.length !== 0) ? errors : false;\n  }\n\n  convertValue(value: string, context: Context): string | ValueError[] {\n    const ret = context.resolver.resolveName(value.trim());\n    if (ret === undefined) {\n      return [new ValueError(`cannot resolve the name ${value}`)];\n    }\n\n    return `{${ret.ns}}${ret.name}`;\n  }\n}\n\nclass duration extends CommonStringBased {\n  readonly name: string = \"duration\";\n  readonly typeErrorMsg: string = \"not a valid duration\";\n  readonly regexp: RegExp =\n    // tslint:disable-next-line:max-line-length\n    /^\\s*-?P(?!$)(?:\\d+Y)?(?:\\d+M)?(?:\\d+D)?(?:T(?!$)(?:\\d+H)?(?:\\d+M)?(?:\\d+(\\.\\d+)?S)?)?\\s*$/;\n  readonly validParams: Parameter[] = [patternP];\n  readonly needsContext: boolean = false;\n}\n\nconst yearPattern: string = \"-?(?:[1-9]\\\\d*)?\\\\d{4}\";\nconst monthPattern: string  = \"[01]\\\\d\";\nconst domPattern: string  = \"[0-3]\\\\d\";\nconst timePattern: string  = \"[012]\\\\d:[0-5]\\\\d:[0-5]\\\\d(?:\\\\.\\\\d+)?\";\nconst tzPattern: string  = \"(?:[+-][01]\\\\d:[0-5]\\\\d|Z)\";\nconst tzRe: RegExp = new RegExp(`${tzPattern}$`);\n\nfunction isLeapYear(year: number): boolean {\n  return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n}\n\nconst dateGroupingRe: RegExp = new RegExp(\n  `^\\\\s*(${yearPattern})-(${monthPattern})-(${domPattern})T(${timePattern})` +\n    `(${tzPattern}?)\\\\s*$`);\n\nconst maxDoms: (number|undefined)[] =\n  [undefined, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction checkDate(value: string): boolean {\n  // The Date.parse method of JavaScript is not reliable.\n  const match = value.match(dateGroupingRe);\n  if (match === null) {\n    return false;\n  }\n\n  const year = match[1];\n  const leap = isLeapYear(Number(year));\n  const month = Number(match[2]);\n  if (month === 0 || month > 12) {\n    return false;\n  }\n\n  const dom = Number(match[3]);\n  // We cannot have an undefined value here... so...\n  // tslint:disable-next-line:no-non-null-assertion\n  let maxDom = maxDoms[month]!;\n  if (month === 2 && !leap) {\n    maxDom = 28;\n  }\n  if (dom === 0 || dom > maxDom) {\n    return false;\n  }\n\n  const timeParts = match[4].split(\":\");\n  const minutes = Number(timeParts[1]);\n  if (minutes > 59) {\n    return false;\n  }\n\n  const seconds = Number(timeParts[2]);\n  if (seconds > 59) {\n    return false;\n  }\n\n  // 24 is valid if minutes and seconds are at 0, otherwise 23 is the\n  // limit.\n  const hoursLimit = (minutes === 0 && seconds === 0) ? 24 : 23;\n  if (Number(timeParts[0]) > hoursLimit) {\n    return false;\n  }\n\n  if (match[5] !== undefined && match[5] !== \"\" && match[5] !== \"Z\") {\n    // We have a TZ\n    const tzParts = match[5].split(\":\");\n    // Slice: skip the sign.\n    const tzHours = Number(tzParts[0].slice(1));\n    if (tzHours > 14) {\n      return false;\n    }\n\n    const tzSeconds = Number(tzParts[1]);\n    if (tzSeconds > 59) {\n      return false;\n    }\n\n    if (tzHours === 14 && tzSeconds !== 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nclass dateTime extends CommonStringBased {\n  readonly name: string = \"dateTime\";\n  readonly typeErrorMsg: string = \"not a valid dateTime\";\n  readonly regexp: RegExp = new RegExp(\n    `^\\\\s*${yearPattern}-${monthPattern}-${domPattern}` +\n    `T${timePattern}${tzPattern}?\\\\s*$`);\n  readonly needsContext: boolean = false;\n  readonly validParams: Parameter[] = [patternP];\n  disallows(value: string, params: ParsedParams): ValueError[] | false {\n    const ret = super.disallows(value, params);\n    if (ret instanceof Array) {\n      return ret;\n    }\n\n    if (!checkDate(value)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    return false;\n  }\n}\n\nclass time extends CommonStringBased {\n  readonly name: string = \"time\";\n  readonly typeErrorMsg: string = \"not a valid time\";\n  readonly regexp: RegExp = new RegExp(`^\\\\s*${timePattern}${tzPattern}?\\\\s*$`);\n  readonly validParams: Parameter[] = [patternP];\n  readonly needsContext: boolean = false;\n  disallows(value: string, params: ParsedParams): ValueError[] | false {\n    const ret = super.disallows(value, params);\n    if (ret) {\n      return ret;\n    }\n\n    // Date does not validate times, so set the date to something fake.\n    if (!checkDate(`1901-01-01T${value}`)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    return false;\n  }\n}\n\nclass date extends CommonStringBased {\n  readonly name: string = \"date\";\n  readonly typeErrorMsg: string = \"not a valid date\";\n  readonly regexp: RegExp = new RegExp(\n    `^\\\\s*${yearPattern}-${monthPattern}-${domPattern}${tzPattern}?\\\\s*$`);\n  readonly needsContext: boolean = false;\n  readonly validParams: Parameter[] = [patternP];\n  disallows(value: string, params: ParsedParams): ValueError[] | false {\n    const ret = super.disallows(value, params);\n    if (ret) {\n      return ret;\n    }\n\n    // We have to add time for Date() to parse it.\n    const match = value.match(tzRe);\n    const withTime = match !== null ?\n      `${value.slice(0, match.index)}T00:00:00${match[0]}` :\n      `${value}T00:00:00`;\n    if (!checkDate(withTime)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    return false;\n  }\n}\n\nclass gYearMonth extends CommonStringBased {\n  readonly name: string = \"gYearMonth\";\n  readonly typeErrorMsg: string = \"not a valid gYearMonth\";\n  readonly regexp: RegExp = new RegExp(\n    `^\\\\s*${yearPattern}-${monthPattern}${tzPattern}?\\\\s*$`);\n  readonly validParams: Parameter[] = [patternP];\n  readonly needsContext: boolean = false;\n  disallows(value: string, params: ParsedParams): ValueError[] | false {\n    const ret = super.disallows(value, params);\n    if (ret) {\n      return ret;\n    }\n\n    // We have to add a day and time for Date() to parse it.\n    const match = value.match(tzRe);\n    const withTime = match !== null ?\n      `${value.slice(0, match.index)}-01T00:00:00${match[0]}` :\n      `${value}-01T00:00:00`;\n    if (!checkDate(withTime)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    return false;\n  }\n}\n\nclass gYear extends CommonStringBased {\n  readonly name: string = \"gYear\";\n  readonly typeErrorMsg: string = \"not a valid gYear\";\n  readonly regexp: RegExp = new RegExp(`^\\\\s*${yearPattern}${tzPattern}?\\\\s*$`);\n  readonly needsContext: boolean = false;\n  readonly validParams: Parameter[] = [patternP];\n  disallows(value: string, params: ParsedParams): ValueError[] | false {\n    const ret = super.disallows(value, params);\n    if (ret) {\n      return ret;\n    }\n\n    // We have to add a month, a day and a time for Date() to parse it.\n    const match = value.match(tzRe);\n    const withTime = match !== null ?\n      `${value.slice(0, match.index)}-01-01T00:00:00${match[0]}` :\n      `${value}-01-01T00:00:00`;\n    if (!checkDate(withTime)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    return false;\n  }\n}\n\nclass gMonthDay extends CommonStringBased {\n  readonly name: string = \"gMonthDay\";\n  readonly typeErrorMsg: string = \"not a valid gMonthDay\";\n  readonly regexp: RegExp = new RegExp(\n    `^\\\\s*${monthPattern}-${domPattern}${tzPattern}?\\\\s*$`);\n  readonly needsContext: boolean = false;\n  readonly validParams: Parameter[] = [patternP];\n  disallows(value: string, params: ParsedParams): ValueError[] | false {\n    const ret = super.disallows(value, params);\n    if (ret) {\n      return ret;\n    }\n\n    // We have to add a year and a time for Date() to parse it.\n    const match = value.match(tzRe);\n    const withTime = match !== null ?\n      `${value.slice(0, match.index)}T00:00:00${match[0]}` :\n      `${value}T00:00:00`;\n    // We always add 2000, which is a leap year, so 01-29 won't raise an\n    // error.\n    if (!checkDate(`2000-${withTime}`)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    return false;\n  }\n}\n\nclass gDay extends CommonStringBased {\n  readonly name: string = \"gDay\";\n  readonly typeErrorMsg: string = \"not a valid gDay\";\n  readonly regexp: RegExp = new RegExp(`^\\\\s*${domPattern}${tzPattern}?\\\\s*$`);\n  readonly needsContext: boolean = false;\n  readonly validParams: Parameter[] = [patternP];\n  disallows(value: string, params: ParsedParams): ValueError[] | false {\n    const ret = super.disallows(value, params);\n    if (ret) {\n      return ret;\n    }\n\n    // We have to add a year and a time for Date() to parse it.\n    const match = value.match(tzRe);\n    const withTime = match !== null ?\n      `${value.slice(0, match.index)}T00:00:00${match[0]}` :\n      `${value}T00:00:00`;\n    // We always add 2000, which is a leap year, so 01-29 won't raise an\n    // error.\n    if (!checkDate(`2000-01-${withTime}`)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    return false;\n  }\n}\n\nclass gMonth extends CommonStringBased {\n  readonly name: string = \"gMonth\";\n  readonly typeErrorMsg: string = \"not a valid gMonth\";\n  readonly regexp: RegExp =\n    new RegExp(`^\\\\s*${monthPattern}${tzPattern}?\\\\s*$`);\n  readonly needsContext: boolean = false;\n  readonly validParams: Parameter[] = [patternP];\n  disallows(value: string, params: ParsedParams): ValueError[] | false {\n    const ret = super.disallows(value, params);\n    if (ret) {\n      return ret;\n    }\n\n    // We have to add a year and a time for Date() to parse it.\n    const match = value.match(tzRe);\n    const withTime = match !== null ?\n      `${value.slice(0, match.index)}-01T00:00:00${match[0]}` :\n      `${value}-01T00:00:00`;\n    // We always add 2000, which is a leap year, so 01-29 won't raise an\n    // error.\n    if (!checkDate(`2000-${withTime}`)) {\n      return [new ValueError(this.typeErrorMsg)];\n    }\n\n    return false;\n  }\n}\n\n//\n// See\n// https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/datatypes.html#anyURI\n//\n// Though the specification referred above above does not require any syntactic\n// checks, in practice Jing reports errors on malformed URIs. We follow Jing's\n// lead.\n//\n\n// tslint:disable-next-line:max-line-length\n// Derived from https://stackoverflow.com/questions/161738/what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url/190405#190405\n// tslint:disable-next-line:max-line-length\nconst reJsRfc3987UriReference = /^\\s*(?:[a-z](?:[-a-z0-9\\+\\.])*:(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD}!\\$&'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+\\.[-a-z0-9\\._~!\\$&'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@])|[\\uE000-\\uF8FF\\uF0000-\\uFFFFD\\u100000-\\u10FFFD\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?|(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD}!\\$&'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+\\.[-a-z0-9\\._~!\\$&'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=@])+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@])|[\\uE000-\\uF8FF\\uF0000-\\uFFFFD\\u100000-\\u10FFFD\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\uA0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\u10000-\\u1FFFD\\u20000-\\u2FFFD\\u30000-\\u3FFFD\\u40000-\\u4FFFD\\u50000-\\u5FFFD\\u60000-\\u6FFFD\\u70000-\\u7FFFD\\u80000-\\u8FFFD\\u90000-\\u9FFFD\\uA0000-\\uAFFFD\\uB0000-\\uBFFFD\\uC0000-\\uCFFFD\\uD0000-\\uDFFFD\\uE1000-\\uEFFFD!\\$&'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?)$/i\n\nclass anyURI extends CommonStringBased {\n  readonly name: string = \"anyURI\";\n  readonly typeErrorMsg: string = \"not a valid anyURI\";\n  readonly regexp: RegExp = reJsRfc3987UriReference;\n  readonly needsContext: boolean = false;\n  readonly validParams: Parameter[] =\n    [patternP, lengthP, minLengthP, maxLengthP];\n}\n\nconst types: any[] = [\n  string_,\n  normalizedString,\n  token,\n  language,\n  Name,\n  NCName,\n  NMTOKEN,\n  NMTOKENS,\n  ID,\n  IDREF,\n  IDREFS,\n  ENTITY,\n  ENTITIES,\n  decimal,\n  integer,\n  nonPositiveInteger,\n  negativeInteger,\n  nonNegativeInteger,\n  positiveInteger,\n  long_,\n  int_,\n  short_,\n  byte_,\n  unsignedLong,\n  unsignedInt,\n  unsignedShort,\n  unsignedByte,\n  boolean_,\n  base64Binary,\n  hexBinary,\n  float_,\n  double_,\n  QName,\n  NOTATION,\n  duration,\n  dateTime,\n  time,\n  date,\n  gYearMonth,\n  gYear,\n  gMonthDay,\n  gDay,\n  gMonth,\n  anyURI,\n];\n\nconst library: TypeLibrary = {\n  // tslint:disable-next-line: no-http-string\n  uri: \"http://www.w3.org/2001/XMLSchema-datatypes\",\n  types: {},\n};\n\nfor (const type of types) {\n  const instance = new type();\n  library.types[instance.name] = instance;\n}\n\n/**\n * The XML Schema datatype library.\n */\nexport const xmlschema: TypeLibrary = library;\n\n//  LocalWords:  XMLSchema datatypes MPL whitespace param minLength maxLength\n//  LocalWords:  RNG rng failedOn totalDigits fractionDigits ValueError repr zA\n//  LocalWords:  ParamError maxInclusive maxExclusive NaN minInclusive params\n//  LocalWords:  minExclusive whitespaces parseParams unparsed XMLSChema NCName\n//  LocalWords:  normalizedString xmlNameChar NMTOKEN NMTOKENS IDREF xmlNcname\n//  LocalWords:  IDREFS decimalPattern integerPattern highestVal lowestVal AQgw\n//  LocalWords:  nonPositiveInteger negativeInteger nonNegativeInteger Za fA Ee\n//  LocalWords:  positiveInteger unsignedLong unsignedInt unsignedShort QName\n//  LocalWords:  unsignedByte AEIMQUYcgkosw hexBinary tzPattern yearPattern TZ\n//  LocalWords:  monthPattern domPattern timePattern dateTime gYearMonth gYear\n//  LocalWords:  gMonthDay gDay gMonth anyURI withTime\n"]}