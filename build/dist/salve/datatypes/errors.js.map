{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../../../lib/salve/datatypes/errors.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;AAEH,oCAAwC;AAExC;;;;GAIG;AACH,MAAa,UAAU;IACrB;;;OAGG;IACH,YAAqB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;IACpC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CACF;AAXD,gCAWC;AAED;;;;GAIG;AACH,MAAa,UAAU;IACrB;;OAEG;IACH,YAAqB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;IACpC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CACF;AAVD,gCAUC;AAED;;;;;GAKG;AACH,MAAa,qBAAsB,SAAQ,KAAK;IAK9C;;;;;OAKG;IACH,YAAY,QAAgB,EAAW,MAAoB;QACzD,KAAK,EAAE,CAAC;QAD6B,WAAM,GAAN,MAAM,CAAc;QAGzD,sEAAsE;QACtE,4EAA4E;QAC5E,SAAS;QACT,MAAM,GAAG,GACP,GAAG,QAAQ,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC,CAAa,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3E,MAAM,GAAG,GAAU,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,uBAAuB,CAAC;QACpC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAC3B,oBAAY,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC;IAC5C,CAAC;CACF;AAzBD,sDAyBC;AAED;;;;;GAKG;AACH,MAAa,oBAAqB,SAAQ,KAAK;IAK7C;;;;OAIG;IACH,YAAY,QAAgB,EAAW,MAAoB;QACzD,KAAK,EAAE,CAAC;QAD6B,WAAM,GAAN,MAAM,CAAc;QAEzD,sEAAsE;QACtE,4EAA4E;QAC5E,SAAS;QACT,MAAM,GAAG,GACP,GAAG,QAAQ,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC,CAAa,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3E,MAAM,GAAG,GAAU,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,sBAAsB,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAC3B,oBAAY,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;IAC3C,CAAC;CACF;AAvBD,oDAuBC;AAED,0EAA0E","sourcesContent":["/**\n * Errors that can be raised during parsing of types.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { fixPrototype } from \"../tools\";\n\n/**\n * Records an error due to an incorrect parameter (``<param>``) value. This is\n * an error in the **schema** used to validate a document. Note that these\n * errors are *returned* by salve's internal code. They are not *thrown*.\n */\nexport class ParamError {\n  /**\n   *\n   * @param message The actual error description.\n   */\n  constructor(readonly message: string) {\n  }\n\n  toString(): string {\n    return this.message;\n  }\n}\n\n/**\n * Records an error due to an incorrect value (``<value>``).  This is an error\n * in the **schema** used to validate a document. Note that these errors are\n * *returned* by salve's internal code. They are not *thrown*.\n */\nexport class ValueError {\n  /**\n   * @param message The actual error description.\n   */\n  constructor(readonly message: string) {\n  }\n\n  toString(): string {\n    return this.message;\n  }\n}\n\n/**\n * Records the failure of parsing a parameter (``<param>``) value. Whereas\n * [[ParamError]] records each individual issue with a parameter's parsing, this\n * object is used to throw a single failure that collects all the individual\n * issues that were encountered.\n */\nexport class ParameterParsingError extends Error {\n  readonly name: string;\n  readonly stack: string | undefined;\n  readonly message: string;\n\n  /**\n   *\n   * @param location The location of the ``<param>`` in the schema.\n   *\n   * @param errors The errors encountered.\n   */\n  constructor(location: string, readonly errors: ParamError[]) {\n    super();\n\n    // This is crap to work around the fact that Error is a terribly badly\n    // designed class or prototype or whatever. Unfortunately the stack trace is\n    // off...\n    const msg: string =\n      `${location}: ${errors.map((x: ParamError) => x.toString()).join(\"\\n\")}`;\n    const err: Error = new Error(msg);\n    this.name = \"ParameterParsingError\";\n    this.stack = err.stack;\n    this.message = err.message;\n    fixPrototype(this, ParameterParsingError);\n  }\n}\n\n/**\n * Records the failure of parsing a value (``<value>``). Whereas [[ValueError]]\n * records each individual issue with a value's parsing, this object is used to\n * throw a single failure that collects all the individual issues that were\n * encountered.\n */\nexport class ValueValidationError extends Error {\n  readonly name: string;\n  readonly stack: string | undefined;\n  readonly message: string;\n\n  /**\n   * @param location The location of the ``<value>`` in the schema.\n   *\n   * @param errors The errors encountered.\n   */\n  constructor(location: string, readonly errors: ValueError[]) {\n    super();\n    // This is crap to work around the fact that Error is a terribly badly\n    // designed class or prototype or whatever. Unfortunately the stack trace is\n    // off...\n    const msg: string =\n      `${location}: ${errors.map((x: ValueError) => x.toString()).join(\"\\n\")}`;\n    const err: Error = new Error(msg);\n    this.name = \"ValueValidationError\";\n    this.stack = err.stack;\n    this.message = err.message;\n    fixPrototype(this, ValueValidationError);\n  }\n}\n\n//  LocalWords:  MPL ParamError ParameterParsingError ValueValidationError\n"]}