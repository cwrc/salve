{"version":3,"file":"convert.js","sourceRoot":"","sources":["../../../../lib/salve/scripts/convert.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Conversion cli tool.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport * as crypto from \"@trust/webcrypto\";\nimport { ArgumentParser } from \"argparse\";\nimport * as fs from \"fs\";\nimport * as nodeFetch from \"node-fetch\";\nimport * as path from \"path\";\nimport requireDir from \"require-dir\";\nimport * as temp from \"temp\";\nimport { URL } from \"url\";\nimport * as util from \"util\";\n\nimport fileUrl from \"file-url\";\n\n(global as any).fetch = nodeFetch;\n(global as any).URL = URL;\n(global as any).crypto = crypto;\n(global as any).TextEncoder = util.TextEncoder;\n\n// We load individual modules rather than the build module because the\n// conversion code uses parts of salve that are not public.\nimport { Element, getAvailableSimplifiers, getAvailableValidators,\n         makeResourceLoader, makeSimplifier, makeValidator,\n         parseSimplifiedSchema, SchemaValidationError, serialize,\n         SimplificationResult } from \"../conversion\";\nimport { ParameterParsingError, ValueValidationError } from \"../datatypes\";\nimport { writeTreeToJSON } from \"../json-format/write\";\nimport { version } from \"../validate\";\nimport { Fatal } from \"./convert/fatal\";\n\n// tslint:disable:no-console no-non-null-assertion radix\n\ntemp.track();\n\nconst prog = path.basename(process.argv[1]);\nconst stderr = process.stderr;\n\nrequireDir(\"../conversion/schema-simplifiers\");\nrequireDir(\"../conversion/schema-validators\");\n\n//\n// Safety harness\n//\n\nlet args: any;\nlet terminating = false;\nfunction terminate(ex: unknown): void {\n  // We don't want to handle exceptions that happen while we're terminating.\n  if (terminating) {\n    if (ex != null) {\n      process.stderr.write(`${prog}: got error while terminating\\n`);\n      process.stderr.write(util.inspect(ex));\n    }\n\n    return;\n  }\n\n  terminating = true;\n  if (ex != null) {\n    if (ex instanceof Fatal) {\n      process.stderr.write(`${prog}: ${ex.message}\\n`);\n      process.exit(1);\n    }\n    else {\n      if (!args || !args.keep_temp) {\n        temp.cleanup(); // We need to do this ourselves...\n      }\n      throw ex;\n    }\n  }\n}\nprocess.on(\"uncaughtException\", terminate);\nprocess.on(\"unhandledRejection\", ex => {\n  // We convert the rejection into an uncaught exception.\n  throw ex;\n});\n\n//\n// The real logic begins here.\n//\n\nconst parser = new ArgumentParser({\n  addHelp: true,\n  description: \"Converts a simplified RNG file to a JavaScript file \" +\n    \"that salve can use.\",\n});\n\nparser.addArgument([\"--version\"], {\n  help: \"Show program's version number and exit.\",\n  action: \"version\",\n  version,\n} as any);\n\nconst availableSimplifiers = getAvailableSimplifiers();\nif (!availableSimplifiers.includes(\"internal\")) {\n  throw new Fatal(\"internal must be among the available validators\");\n}\n\nparser.addArgument([\"--simplifier\"], {\n  help: \"Select the schema simplifier.\",\n  choices: availableSimplifiers,\n  defaultValue: \"internal\",\n});\n\nconst availableValidators = getAvailableValidators();\nif (!availableValidators.includes(\"internal\")) {\n  throw new Fatal(\"internal must be among the available validators on Node!\");\n}\navailableValidators.push(\"none\");\n\nparser.addArgument([\"--validator\"], {\n  help: \"Select how the schema is going to be validated.\",\n  choices: availableValidators,\n  defaultValue: \"internal\",\n});\n\nparser.addArgument([\"--no-optimize-ids\"], {\n  help: \"Do NOT optimize the identifiers used by references and definitions.\",\n  action: \"storeTrue\",\n});\n\nparser.addArgument([\"--include-paths\"], {\n  help: \"Include RNG node path information in the JavaScript file.\",\n  action: \"storeTrue\",\n});\n\nparser.addArgument([\"--format-version\"], {\n  help: \"Version number of the JavaScript format that the tool must produce.\",\n  type: Number,\n  defaultValue: 3,\n});\n\nparser.addArgument([\"--simplify-only\"], {\n  help: \"Stop converting at the simplification stage.\",\n  action: \"storeTrue\",\n});\n\nparser.addArgument([\"--simplify-to\"], {\n  help: \"Simplify only to a specific stage, inclusively. (Note that pipelines \\\nmay not be able to stop at all stages.) This is mainly useful for debugging. \\\nImplies ``--simplify-only``.\",\n  type: Number,\n  defaultValue: Infinity,\n});\n\nparser.addArgument([\"--no-output\"], {\n  help: \"Skip producing any output. This may be useful for debugging.\",\n  action: \"storeTrue\",\n});\n\nparser.addArgument([\"--simplified-input\"], {\n  help: \"The input is as simplified RNG.\",\n  action: \"storeTrue\",\n});\n\nparser.addArgument([\"--keep-temp\"], {\n  help: \"Keep the temporary files around. Useful for diagnosis.\",\n  action: \"storeTrue\",\n});\n\nparser.addArgument([\"-v\", \"--verbose\"], {\n  help: \"Run verbosely.\",\n  action: \"storeTrue\",\n});\n\nparser.addArgument([\"--timing\"], {\n  help: \"Output timing information. Implies --verbose.\",\n  action: \"storeTrue\",\n});\n\nparser.addArgument([\"--verbose-format\"], {\n  help: `Outputs a verbose version of the data, with actual class names \\\ninstead of numbers. Implies --no-optimize-ids. This format is cannot \\\nbe read by salve. It is meant for debugging purposes only.`,\n  action: \"storeTrue\",\n});\n\nparser.addArgument([\"--allow-incomplete-types\"], {\n  help: `Without this flag, the conversion process will stop upon \\\nencountering types that are not fully supported. Using this flag will \\\nallow the conversion to happen. Use --allow-incomplete-types=quiet to \\\nsuppress all warnings about this.`,\n});\n\nparser.addArgument([\"input_path\"]);\nparser.addArgument([\"output_path\"]);\n\nargs = parser.parseArgs();\n\nif (args.timing) {\n  args.verbose = true;\n}\n\nif (args.verbose_format) {\n  args.no_optimize_ids = true;\n}\n\nif (args.simplify_to !== Infinity) {\n  args.simplify_only = true;\n}\n\nif (args.format_version < 3) {\n  throw new Fatal(`can't produce format version ${args.format_version}`);\n}\n\nlet _tempDir: string;\nfunction ensureTempDir(): string {\n  if (_tempDir === undefined) {\n    _tempDir = temp.mkdirSync({ prefix: \"salve-convert\" });\n\n    if (args.keep_temp) {\n      temp.track(false);\n      console.log(`Temporary files in: ${_tempDir}`);\n    }\n  }\n\n  return _tempDir;\n}\n\n/**\n * Meant to be used as the ``after`` call back for ``executeStep``. Performs the\n * conversion from RNG to JS.\n *\n * @param simplified The result of the simplification.\n */\nasync function convert(result: SimplificationResult): Promise<void> {\n  const simplified = result.simplified;\n  if (args.simplify_only && !args.no_output) {\n    return fs.promises.writeFile(args.output_path,\n                                 serialize(simplified, { prettyPrint: true }));\n  }\n\n  if (result.warnings.length !== 0 &&\n      args.allow_incomplete_types !== \"quiet\") {\n    stderr.write(`${prog}: WARNING: incomplete types are used in the schema\\n`);\n\n    result.warnings.forEach(x => {\n      stderr.write(`${prog}: ${x}\\n`);\n    });\n    if (!args.allow_incomplete_types) {\n      throw new Fatal(\"use --allow-incomplete-types to convert a file \" +\n                      \"using these types\");\n    }\n    else {\n      stderr.write(`${prog}: allowing as requested\\n`);\n    }\n  }\n\n  let convStartTime: number | undefined;\n  if (args.verbose) {\n    console.log(\"Transforming RNG to JavaScript...\");\n    if (args.timing) {\n      convStartTime = Date.now();\n    }\n  }\n\n  if (!args.no_output) {\n    fs.writeFileSync(args.output_path,\n                     writeTreeToJSON(simplified, args.format_version,\n                                     args.include_paths, args.verbose_format,\n                                     !args.no_optimize_ids));\n  }\n\n  if (args.timing) {\n    console.log(`Conversion delta: ${Date.now() - convStartTime!}`);\n  }\n}\n\nasync function start(): Promise<void> {\n  let startTime: number | undefined;\n  if (args.simplified_input) {\n    return convert({\n      simplified: parseSimplifiedSchema(\n        args.input_path,\n        fs.readFileSync(args.input_path).toString()),\n      warnings: [],\n      manifest: [],\n    });\n  }\n\n  const resourceLoader = makeResourceLoader();\n\n  let simplified: Element | undefined;\n  let warnings: string[] | undefined;\n  if (args.validator !== \"none\") {\n    if (args.verbose) {\n      console.log(\"Validating RNG...\");\n      if (args.timing) {\n        startTime = Date.now();\n      }\n    }\n\n    const validator = makeValidator(args.validator, {\n      verbose: args.verbose,\n      timing: args.timing,\n      resourceLoader,\n      keepTemp: args.keep_temp,\n      simplifyTo: args.simplify_to,\n      ensureTempDir,\n      validate: true,\n      createManifest: false,\n      manifestHashAlgorithm: \"void\",\n    });\n\n    ({ simplified, warnings } =\n     await validator.validate(new URL(fileUrl(args.input_path))));\n\n    if (args.timing) {\n      console.log(`Validation delta: ${Date.now() - startTime!}`);\n    }\n  }\n\n  if (simplified !== undefined) {\n    return convert({\n      simplified,\n      warnings: warnings === undefined ? [] : warnings,\n      manifest: [],\n    });\n  }\n\n  const simplifier = makeSimplifier(args.simplifier, {\n    verbose: args.verbose,\n    timing: args.timing,\n    keepTemp: args.keep_temp,\n    simplifyTo: args.simplify_to,\n    ensureTempDir,\n    resourceLoader,\n    validate: false,\n    createManifest: false,\n    manifestHashAlgorithm: \"void\",\n  });\n\n  return simplifier.simplify(new URL(fileUrl(args.input_path))).then(convert);\n}\n\n// tslint:disable-next-line:no-floating-promises\nstart().then(() => {\n  process.exit(0);\n}).catch(e => {\n  if (e instanceof ValueValidationError ||\n      e instanceof ParameterParsingError ||\n      e instanceof SchemaValidationError) {\n    throw new Fatal(e.message);\n  }\n\n  throw e;\n});\n\n//  LocalWords:  cli MPL uncaughtException externalRef RNG storeTrue args jing\n//  LocalWords:  tempDir dev startTime xsl rng stepStart stepNo xsltproc JS\n//  LocalWords:  stringparam originalDir repeatWhen simplifyingStartTime prog\n//  LocalWords:  xmllint convStartTime\n"]}