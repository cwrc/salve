{"version":3,"file":"ename.js","sourceRoot":"","sources":["../../../lib/salve/ename.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;AAEH;;GAEG;AACH,MAAa,KAAK;IAChB;;;;OAIG;IACH,YAAqB,EAAU,EAAW,IAAY;QAAjC,OAAE,GAAF,EAAE,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAQ;IACtD,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,OAAO,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;IACpC,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,KAAY;QAChB,OAAO,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC;IAC1D,CAAC;CACF;AA1BD,sBA0BC;AAED,uBAAuB","sourcesContent":["/**\n * Class for XML Expanded Names.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\n/**\n * Immutable objects modeling XML Expanded Names.\n */\nexport class EName {\n  /**\n   * @param ns The namespace URI.\n   *\n   * @param name The local name of the entity.\n   */\n  constructor(readonly ns: string, readonly name: string) {\n  }\n\n  /**\n   * @returns A string representing the expanded name.\n   */\n  toString(): string {\n    return `{${this.ns}}${this.name}`;\n  }\n\n  /**\n   * Compares two expanded names.\n   *\n   * @param other The other object to compare this object with.\n   *\n   * @returns  ``true`` if this object equals the other.\n   */\n  equal(other: EName): boolean {\n    return this.ns === other.ns && this.name === other.name;\n  }\n}\n\n//  LocalWords:  MPL ns\n"]}