{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../lib/salve/json-format/common.ts"],"names":[],"mappings":";;;AAAA;;;;;;;GAOG;AACH,0CAEyE;AAQzE,EAAE;AACF,4EAA4E;AAC5E,UAAU;AACV,EAAE;AACW,QAAA,iBAAiB,GAAY;IACxC,KAAK;IACL,gBAAK;IACL,eAAI;IACJ,eAAI;IACJ,gBAAK;IACL,gBAAK;IACL,qBAAU;IACV,eAAI;IACJ,cAAG;IACH,oBAAS;IACT,iBAAM;IACN,gBAAK;IACL,oBAAS;IACT,kBAAO;IACP,iBAAM;IACN,kBAAO;IACP,uEAAuE;IACvE,8DAA8D;IAC9D,SAAgB;IAChB,qBAAU;IACV,eAAI;IACJ,qBAAU;IACV,iBAAM;IACN,kBAAO;CACR,CAAC;AAEF,EAAE;AACF,0EAA0E;AAC1E,UAAU;AACV,EAAE;AACF,+BAA+B;AAClB,QAAA,UAAU,GAA2B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACtE,kBAAU,CAAC,KAAK,GAAG,CAAC,CAAC;AACrB,kBAAU,CAAC,KAAK,GAAG,CAAC,CAAC;AACrB,kBAAU,CAAC,IAAI,GAAG,CAAC,CAAC;AACpB,kBAAU,CAAC,IAAI,GAAG,CAAC,CAAC;AACpB,kBAAU,CAAC,KAAK,GAAG,CAAC,CAAC;AACrB,kBAAU,CAAC,KAAK,GAAG,CAAC,CAAC;AACrB,kBAAU,CAAC,UAAU,GAAG,CAAC,CAAC;AAC1B,kBAAU,CAAC,IAAI,GAAG,CAAC,CAAC;AACpB,kBAAU,CAAC,GAAG,GAAG,CAAC,CAAC;AACnB,kBAAU,CAAC,SAAS,GAAG,CAAC,CAAC;AACzB,kBAAU,CAAC,MAAM,GAAG,EAAE,CAAC;AACvB,kBAAU,CAAC,KAAK,GAAG,EAAE,CAAC;AACtB,kBAAU,CAAC,SAAS,GAAG,EAAE,CAAC;AAC1B,kBAAU,CAAC,OAAO,GAAG,EAAE,CAAC;AACxB,kBAAU,CAAC,MAAM,GAAG,EAAE,CAAC;AACvB,kBAAU,CAAC,OAAO,GAAG,EAAE,CAAC;AACxB,oBAAoB;AACpB,yBAAyB;AACzB,kBAAU,CAAC,UAAU,GAAG,EAAE,CAAC;AAC3B,kBAAU,CAAC,IAAI,GAAG,EAAE,CAAC;AACrB,kBAAU,CAAC,UAAU,GAAG,EAAE,CAAC;AAC3B,kBAAU,CAAC,MAAM,GAAG,EAAE,CAAC;AACvB,kBAAU,CAAC,OAAO,GAAG,EAAE,CAAC;AAExB,sBAAsB;AACT,QAAA,eAAe,GAAG,CAAC,CAAC;AACjC,2BAA2B;AAC3B,kCAAkC;AAClC,SAAS","sourcesContent":["/**\n * This module contains constants common to both reading and writing schemas in\n * the JSON format internal to salve.\n *\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { AnyName, Attribute, BasePattern, Choice, Data, Define, Element, Empty,\n         Grammar, Group, Interleave, List, Name, NameChoice, NotAllowed,\n         NsName, OneOrMore, Param, Ref, Text, Value } from \"../patterns\";\n\nexport type NamePattern = Name | NameChoice | NsName | AnyName;\n\nexport type PatternCtor = new (...args: any[]) => (BasePattern | NamePattern);\n\nexport type Ctors = PatternCtor | typeof Array;\n\n//\n// MODIFICATIONS TO THIS TABLE MUST BE REFLECTED IN ALL OTHER TABLES IN THIS\n// MODULE.\n//\nexport const codeToConstructor: Ctors[] = [\n  Array,\n  Empty,\n  Data,\n  List,\n  Param,\n  Value,\n  NotAllowed,\n  Text,\n  Ref,\n  OneOrMore,\n  Choice,\n  Group,\n  Attribute,\n  Element,\n  Define,\n  Grammar,\n  // EName used to be in this slot. Yes, we cheat with a cast. salve will\n  // crash hard if this slot is accessed, which is what we want.\n  undefined as any,\n  Interleave,\n  Name,\n  NameChoice,\n  NsName,\n  AnyName,\n];\n\n//\n// MODIFICATIONS TO THIS MAP MUST BE REFLECTED IN ALL OTHER TABLES IN THIS\n// MODULE.\n//\n// Element name to code mapping\nexport const nameToCode: Record<string, number> = Object.create(null);\nnameToCode.array = 0;\nnameToCode.empty = 1;\nnameToCode.data = 2;\nnameToCode.list = 3;\nnameToCode.param = 4;\nnameToCode.value = 5;\nnameToCode.notAllowed = 6;\nnameToCode.text = 7;\nnameToCode.ref = 8;\nnameToCode.oneOrMore = 9;\nnameToCode.choice = 10;\nnameToCode.group = 11;\nnameToCode.attribute = 12;\nnameToCode.element = 13;\nnameToCode.define = 14;\nnameToCode.grammar = 15;\n// Historical value.\n// nameToCode.EName = 16;\nnameToCode.interleave = 17;\nnameToCode.name = 18;\nnameToCode.nameChoice = 19;\nnameToCode.nsName = 20;\nnameToCode.anyName = 21;\n\n// This is a bit field\nexport const OPTION_NO_PATHS = 1;\n// var OPTION_WHATEVER = 2;\n// var OPTION_WHATEVER_PLUS_1 = 4;\n// etc...\n"]}