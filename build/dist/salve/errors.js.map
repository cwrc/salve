{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../../lib/salve/errors.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;AAIH;;;;;;;;;;;;;;GAcG;AACH,MAAa,eAAe;IAC1B;;;OAGG;IACH,YAAqB,GAAW;QAAX,QAAG,GAAH,GAAG,CAAQ;QAC9B,+BAA+B;QAC/B,wCAAwC;IAC1C,CAAC;IAED;;;;;OAKG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACH,QAAQ;QACN,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,iBAAiB,CAAC,KAAY;QAC5B,0CAA0C;QAC1C,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,KAAsB;QAC3B,OAAO,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACpE,CAAC;CACF;AA7DD,0CA6DC;AAED;;;GAGG;AACH,MAAa,eAAgB,SAAQ,eAAe;IAClD;;;;OAIG;IACH,YAAY,GAAW,EAAW,IAAU;QAC1C,KAAK,CAAC,GAAG,CAAC,CAAC;QADqB,SAAI,GAAJ,IAAI,CAAM;IAE5C,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC;IAED,iBAAiB,CAAC,KAAY;QAC5B,OAAO,GAAG,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC/C,CAAC;CACF;AAjBD,0CAiBC;AAED;;GAEG;AACH,MAAa,kBAAmB,SAAQ,eAAe;CACtD;AADD,gDACC;AAED;;GAEG;AACH,MAAa,mBAAoB,SAAQ,eAAe;CACvD;AADD,kDACC;AAED;;GAEG;AACH,MAAa,gBAAiB,SAAQ,eAAe;CACpD;AADD,4CACC;AAED;;GAEG;AACH,MAAa,WAAY,SAAQ,eAAe;IAC9C;;;;OAIG;IACH,YAAqB,MAAc,EAAW,MAAc;QAC1D,KAAK,CAAC,EAAE,CAAC,CAAC;QADS,WAAM,GAAN,MAAM,CAAQ;QAAW,WAAM,GAAN,MAAM,CAAQ;IAE5D,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAED,iBAAiB,CAAC,KAAY;QAC5B,MAAM,KAAK,GAAU,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACxD,MAAM,MAAM,GAAU,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAEtD,OAAO,sBAAsB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IAC1E,CAAC;CACF;AApBD,kCAoBC;AAED,wEAAwE","sourcesContent":["/**\n * Validation errors.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\n\nimport { Base } from \"./name_patterns\";\n\n/**\n * The ``fireEvent`` methods return an array of objects of this class to\n * notify the caller of errors in the file being validated.\n *\n * Note that these error objects do not record what (element, attribute, text,\n * etc.) in the XML document was responsible for the error. It is the\n * responsibility of the code that uses salve to combine the error message with\n * an object that points into the document being validated.\n *\n * This is particularly important when considering the equality of errors. Two\n * errors are considered equal if their messages (with names) are the\n * same. *They could still be associated with two different locations in the\n * document being validated.* The code calling salve must distinguish such\n * cases.\n */\nexport class ValidationError {\n  /**\n   *\n   * @param msg The error message.\n   */\n  constructor(readonly msg: string) {\n    // May be useful for debugging:\n    // this.stack_trace = new Error().stack;\n  }\n\n  /**\n   * The default implementation is to return the value of calling\n   * ``this.toStringWithNames(this.getNames())``.\n   *\n   * @returns The text representation of the error.\n   */\n  toString(): string {\n    return this.toStringWithNames(this.getNames());\n  }\n\n  /**\n   * This method provides the caller with the list of all names that are used in\n   * the error message.\n   *\n   * @returns The list of names used in the error message.\n   */\n  getNames(): Base[] {\n    return [];\n  }\n\n  /**\n   * This method transforms this object to a string but uses the names in the\n   * parameter passed to it to format the string.\n   *\n   * Since salve does not work with namespace prefixes, someone using salve\n   * would typically use this method so as to replace the name patterns passed\n   * in error messages with qualified names.\n   *\n   * @param names The array of names to use. This should be an array of the same\n   * length as that returned by [[getNames]] . Each element of the array\n   * corresponds to each name in [[getNames]] and should be something that can\n   * be converted to a meaningful string.\n   *\n   * @returns The object formatted as a string.\n   */\n  toStringWithNames(names: any[]): string {\n    // We do not have names in ValidationError\n    return this.msg;\n  }\n\n  /**\n   * Two [[ValidationError]] objects are considered equal if the values returned\n   * by [[toString]] are equal.\n   *\n   * @param other The other validation error to compare against.\n   *\n   * @returns Whether ``this`` and ``other`` are equal.\n   */\n  equals(other: ValidationError): boolean {\n    return (this === other) || (this.toString() === other.toString());\n  }\n}\n\n/**\n * This class serves as a base for all those errors that have only\n * one name involved.\n */\nexport class SingleNameError extends ValidationError {\n  /**\n   * @param msg The error message.\n   *\n   * @param name The name of the XML entity at stake.\n   */\n  constructor(msg: string, readonly name: Base) {\n    super(msg);\n  }\n\n  getNames(): Base[] {\n    return [this.name];\n  }\n\n  toStringWithNames(names: any[]): string {\n    return `${this.msg}: ${names[0].toString()}`;\n  }\n}\n\n/**\n * Error returned when an attribute name is invalid.\n */\nexport class AttributeNameError extends SingleNameError {\n}\n\n/**\n * Error returned when an attribute value is invalid.\n */\nexport class AttributeValueError extends SingleNameError {\n}\n\n/**\n * Error returned when an element is invalid.\n */\nexport class ElementNameError extends SingleNameError {\n}\n\n/**\n * Error returned when choice was not satisfied.\n */\nexport class ChoiceError extends ValidationError {\n  /**\n   * @param namesA The names of the first XML entities at stake.\n   *\n   * @param namesB The names of the second XML entities at stake.\n   */\n  constructor(readonly namesA: Base[], readonly namesB: Base[]) {\n    super(\"\");\n  }\n\n  getNames(): Base[] {\n    return this.namesA.concat(this.namesB);\n  }\n\n  toStringWithNames(names: any[]): string {\n    const first: any[] = names.slice(0, this.namesA.length);\n    const second: any[] = names.slice(this.namesA.length);\n\n    return `must choose either ${first.join(\", \")} or ${second.join(\", \")}`;\n  }\n}\n\n//  LocalWords:  MPL ValidationError toStringWithNames getNames toString\n"]}