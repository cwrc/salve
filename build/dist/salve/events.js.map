{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../lib/salve/events.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Classes that model possible events.\n * @author Louis-Dominique Dubeau\n * @license MPL 2.0\n * @copyright Mangalam Research Center for Buddhist Languages\n */\nimport { ConcreteName } from \"./name_patterns\";\n\n/**\n * This is the class that events **returned** by salve derive from. This class\n * is entirely abstract but it can still be use for instanceof tests.\n */\nexport abstract class Event {\n\n  /**\n   * The event name. All concrete classes deriving from this class must have a\n   * unique name per class. That is, objects of two different classes have\n   * different names, and all objects of the same class have the same name. The\n   * logic below and elsewhere relies on this contract.\n   */\n  abstract readonly name: string;\n\n  /** The event parameter. This is null if the event has no parameter. */\n  abstract readonly param: string | ConcreteName | RegExp | null;\n\n  /** Whether it is an attribute event. */\n  abstract readonly isAttributeEvent: boolean;\n\n  /**\n   * The event parameters. This consists of the event name, followed by\n   * the rest of the parameters making up the event.\n   *\n   * @deprecated This field will be removed in a future major release.\n   */\n  abstract readonly params: [string] | [string, string | ConcreteName | RegExp];\n\n  // The codebase here does not use equals, but our companion library salve-dom\n  // does.\n  /**\n   * Determine if this event is equal to another. Two events are deemed equal if\n   * they are of the same class, and have equal [[param]].\n   *\n   *\n   * @param other The other event.\n   *\n   * @returns Whether the events are equal.\n   */\n  abstract equals(other: Event): boolean;\n\n  /**\n   * Provide a specialized string representation of the event.\n   */\n  abstract toString(): string;\n}\n\n/**\n * A class for events that take a name pattern as parameter.\n */\nexport abstract class NamePatternEvent<Name extends string> extends Event {\n  protected constructor(readonly name: Name,\n                        readonly namePattern: ConcreteName) {\n    super();\n  }\n\n  get param(): ConcreteName {\n    return this.namePattern;\n  }\n\n  get params(): [Name, ConcreteName] {\n    return [this.name, this.namePattern];\n  }\n\n  equals(other: Event): boolean {\n    return this.name === other.name && this.namePattern.toString() ===\n      (other as NamePatternEvent<string>).namePattern.toString();\n  }\n\n  toString(): string {\n    return `Event: ${this.name}, ${this.namePattern}`;\n  }\n}\n\nexport class EnterStartTagEvent extends NamePatternEvent<\"enterStartTag\"> {\n  readonly isAttributeEvent: false = false;\n\n  constructor(namePattern: ConcreteName) {\n    super(\"enterStartTag\", namePattern);\n  }\n}\n\nexport class LeaveStartTagEvent extends Event {\n  readonly name: \"leaveStartTag\" = \"leaveStartTag\";\n  readonly isAttributeEvent: false = false;\n  readonly param: null = null;\n\n  get params(): [\"leaveStartTag\"] {\n    return [\"leaveStartTag\"];\n  }\n\n  equals(other: Event): boolean {\n    return this.name === other.name;\n  }\n\n  toString(): string {\n    return `Event: ${this.name}`;\n  }\n}\n\nexport class EndTagEvent extends NamePatternEvent<\"endTag\"> {\n  readonly isAttributeEvent: false = false;\n\n  constructor(namePattern: ConcreteName) {\n    super(\"endTag\", namePattern);\n  }\n}\n\nexport class AttributeNameEvent extends NamePatternEvent<\"attributeName\"> {\n  readonly isAttributeEvent: true = true;\n\n  constructor(namePattern: ConcreteName) {\n    super(\"attributeName\", namePattern);\n  }\n}\n\n/**\n * A class for events that take a string or regexp value as parameter.\n */\nexport abstract class ValueEvent<Name extends string> extends Event {\n  protected constructor(readonly name: Name,\n                        readonly value: string | RegExp,\n                        readonly documentation?: string) {\n    super();\n  }\n\n  get params(): [Name, string | RegExp] {\n    return [this.name, this.value];\n  }\n\n  get param(): string | RegExp {\n    return this.value;\n  }\n\n  equals(other: Event): boolean {\n    return this.name === other.name && this.value.toString() ===\n      (other as ValueEvent<string>).value.toString();\n  }\n\n  toString(): string {\n    return `Event: ${this.name}, ${this.value}`;\n  }\n}\n\nexport class AttributeValueEvent extends ValueEvent<\"attributeValue\"> {\n  readonly isAttributeEvent: true = true;\n\n  constructor(value: string | RegExp, documentation?: string) {\n    super(\"attributeValue\", value, documentation);\n  }\n}\n\nexport class TextEvent extends ValueEvent<\"text\"> {\n  readonly isAttributeEvent: false = false;\n\n  constructor(value: string | RegExp, documentation?: string) {\n    super(\"text\", value, documentation);\n  }\n}\n\nexport type Events = EnterStartTagEvent | LeaveStartTagEvent | EndTagEvent |\n  AttributeNameEvent | AttributeValueEvent | TextEvent;\n"]}